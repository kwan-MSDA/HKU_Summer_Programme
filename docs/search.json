[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HKU Summer Programme 2025",
    "section": "",
    "text": "This is KT from the Faculty of Social Sciences at HKU."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Some R example\n\n\ndata(mtcars)\n\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  labs(title = \"Scatter plot of MPG vs Weight\",\n       x = \"Weight (1000 lbs)\",\n       y = \"Miles per Gallon (MPG)\")"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "",
    "text": "Hands-On: Introduction to Sentiment Analysis with R\nAudience: High school students new to R\nDuration: 2 hours\nEnvironment: R and RStudio\n\n\n\nThis 2-hour workshop introduces high school students to sentiment analysis using R in RStudio\nwe will analyze social media comments about AI’s societal impact\n\nlearning basic R commands\nexploring how sentiment analysis reveals public opinions\n\nRoadmap\n\nbackground on sentiment analysis\nhands-on tasks\ndiscussions linking AI to society\n\nLearning Goals:\n\nUnderstand sentiment analysis and how AI can enhance it\nLearn basic R commands for text analysis\nAnalyze sentiments in comments about AI’s societal impact\nDiscuss how sentiment analysis informs AI’s role in society\n\n\n\nPrerequisites: No R experience needed. Students need R and RStudio installed.\nMaterials: Laptops with R and RStudio, a simple dataset (provided in code).\n\n\n\n\n\nWhat is Sentiment Analysis?\n\nSentiment analysis is an AI technique that identifies emotions in text\n\ncommonly label them\n\npositive\n\ne.g. I love this!\n\nnegative\n\ne.g. This is scary\n\nneutral\n\ne.g. It’s fine\n\n\n\n\nit is used to understand public opinions/public attitudes\n\ne.g. how people feel about AI in education, jobs, or healthcare\n\n\n\n\n\n\nHow it Works:\n\nLexicon-based\n\nUses a dictionary to assign scores to words\n\ne.g., awesome = +3, worried = -2\n\nWe mainly focus on this approach today for simplicity\n\nMachine Learning-based\n\nTrains machine learning models on labeled data to predict sentiment\n\ne.g., “I love AI!” → positive, “AI is scary” → negative\n\nMore complex but powerful\n\nAdvanced AI\n\nLLM models (like ChatGPT, Deepseek)\nit analyze context for higher accuracy, but they are complex\n\n\n\n\n\n\n\nConnection to AI and Society:\n\nSentiment analysis reveals public attitudes toward AI and products, helping understand its societal impact.\n\nExamples:\n\nCompanies analyze tweets to improve their products\nGovernments study comments to address concerns about the satifaction of its public services\n\nResearchers explore how AI in healthcare is perceived\n\ne.g. trust in AI diagnostics\n\n\n\nBy analyzing text, we learn what excites or worries people, driving further development to benefit society\n\n\n\nAI is transforming society—powering education tools, automating jobs, and aiding doctors\nUnderstanding public sentiment ensures AI is developed responsibly, addressing fears (e.g., privacy) and amplifying benefits\n\ne.g., better learning"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#overview",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#overview",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Overview",
    "text": "Overview\n\nThis 2-hour workshop introduces high school students to sentiment analysis using R in RStudio\nwe will analyze social media comments about AI’s societal impact\n\nlearning basic R commands\nexploring how sentiment analysis reveals public opinions\n\nRoadmap\n\nbackground on sentiment analysis\nhands-on tasks\ndiscussions linking AI to society\n\nLearning Goals:\n\nUnderstand sentiment analysis and how AI can enhance it\nLearn basic R commands for text analysis\nAnalyze sentiments in comments about AI’s societal impact\nDiscuss how sentiment analysis informs AI’s role in society\n\n\n\nPrerequisites: No R experience needed. Students need R and RStudio installed.\nMaterials: Laptops with R and RStudio, a simple dataset (provided in code)."
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#background-sentiment-analysis-and-ai-in-society",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#background-sentiment-analysis-and-ai-in-society",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nWhat is Sentiment Analysis?\n\nSentiment analysis is an AI technique that identifies emotions in text\n\ncommonly label them\n\npositive\n\ne.g. I love this!\n\nnegative\n\ne.g. This is scary\n\nneutral\n\ne.g. It’s fine\n\n\n\n\nit is used to understand public opinions/public attitudes\n\ne.g. how people feel about AI in education, jobs, or healthcare"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#background-sentiment-analysis-and-ai-in-society-1",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#background-sentiment-analysis-and-ai-in-society-1",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nHow it Works:\n\nLexicon-based\n\nUses a dictionary to assign scores to words\n\ne.g., awesome = +3, worried = -2\n\nWe mainly focus on this approach today for simplicity\n\nMachine Learning-based\n\nTrains machine learning models on labeled data to predict sentiment\n\ne.g., “I love AI!” → positive, “AI is scary” → negative\n\nMore complex but powerful\n\nAdvanced AI\n\nLLM models (like ChatGPT, Deepseek)\nit analyze context for higher accuracy, but they are complex"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#background-sentiment-analysis-and-ai-in-society-2",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#background-sentiment-analysis-and-ai-in-society-2",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nConnection to AI and Society:\n\nSentiment analysis reveals public attitudes toward AI and products, helping understand its societal impact.\n\nExamples:\n\nCompanies analyze tweets to improve their products\nGovernments study comments to address concerns about the satifaction of its public services\n\nResearchers explore how AI in healthcare is perceived\n\ne.g. trust in AI diagnostics\n\n\n\nBy analyzing text, we learn what excites or worries people, driving further development to benefit society\n\n\n\nAI is transforming society—powering education tools, automating jobs, and aiding doctors\nUnderstanding public sentiment ensures AI is developed responsibly, addressing fears (e.g., privacy) and amplifying benefits\n\ne.g., better learning"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-1-introduction-and-setup",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-1-introduction-and-setup",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 1: Introduction and Setup",
    "text": "Step 1: Introduction and Setup\n\nObjective: set up RStudio\nTask 1.1: Open RStudio\n\nOpen RStudio\n\nCreate a new R script: File &gt; New File &gt; R Script\n\nSave as sentiment_workshop.R if needed\n\n\nTask 1.2: Install Packages\n\nRun in the console\n\n\n\n\n\nCode\n# Install necessary packages for sentiment analysis\ninstall.packages(c(\"tidyverse\", \"tidytext\", \"textdata\"))\n\n\n\nnote: tidyverse for data tasks; tidytext for text analysis; textdata for sentiment dictionaries\n\n\n\nStep 1 - 10 minutes\nEnsure textdata package is installed, as it provides AFINN, Bing, and NRC lexicons\nContent:\n\nExplain sentiment analysis: “It’s like teaching a computer to read emotions in text, like excitement or fear about AI.”\nLink to AI and Society: “We’ll analyze comments about AI to see how people feel about its impact on jobs or schools.”\n\nRStudio basics: Console (for commands), script editor (for saving code)\n\nPractice (3 minutes):\nType print(“Hello, I’m learning R!”) in the console and press Enter. What happens?\n\nGuess: What sentiment score might “excited” have in a dictionary? “Sad”?\n\nDiscussion (2 minutes):\n\nWhy study sentiments about AI?\n\nExample: How could knowing if people love or fear AI in schools help teachers?"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-2-loading-tools-and-data",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-2-loading-tools-and-data",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 2: Loading Tools and Data",
    "text": "Step 2: Loading Tools and Data\n\nObjective: Load R packages and a dataset of comments\nDataset\n\nFictional social media comments about AI’s societal impact\n\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(textdata)\n\ncomments &lt;- tibble(\n  id = 1:30,\n  text = c(\n    \"AI is amazing and will make education so much better!\",\n    \"I’m worried AI will take over jobs and leave people unemployed.\",\n    \"AI helps doctors save lives, it’s a game-changer.\",\n    \"I don’t trust AI, it feels creepy and invasive.\",\n    \"AI is okay, but it needs regulation to be safe.\",\n    \"AI in schools is cool, but it’s not perfect.\",\n    \"Wow, AI is so great, it’ll solve all our problems… yeah, right!\",  # Sarcasm\n    \"AI makes healthcare faster and more accurate, love it!\",\n    \"Why does AI know so much about me? It’s unsettling.\",\n    \"AI chatbots are fun to talk to, but sometimes useless.\",\n    \"AI in movies is awesome, makes everything so realistic!\",\n    \"I’m scared AI will control everything one day.\",\n    \"AI helps me study better, it’s like a personal tutor.\",\n    \"AI is overhyped, it’s not as smart as people think.\",  # Mixed\n    \"Using AI for art is creative and inspiring!\",\n    \"AI in cars? No way, I don’t trust self-driving tech.\",\n    \"AI makes my phone so smart, it’s incredible!\",\n    \"I feel like AI is watching me all the time, creepy.\",\n    \"AI in gaming makes battles so epic, I’m hooked!\",\n    \"AI might replace teachers, and that’s not cool.\",\n    \"AI saves time at work, but I miss human interaction.\",\n    \"AI’s fine, but it makes mistakes sometimes.\",  # Neutral\n    \"AI in music creation is a total game-changer!\",\n    \"I’m skeptical about AI making fair decisions.\",\n    \"AI is great, but only if it’s used ethically.\",  # Mixed\n    \"AI makes life easier, but it’s a bit scary too.\",  # Mixed\n    \"AI in agriculture boosts crops, amazing stuff!\",\n    \"I don’t get why everyone loves AI so much.\",  # Negative\n    \"AI tutors are helpful, but they don’t replace real teachers.\",\n    \"AI sounds cool, but I’m not sure it’s safe.\"  # Mixed\n  )\n)\n\n\n\nTask 2.1: Run the Code\n\nRun the code (highlight and press Ctrl+Enter)\n\nTask 2.2: View the Data\n\nprint(comments)\n\nTask 2.3: View comments\n\nRun view(comments) in the console\n\nHow many comments are there?\n\n\n\n\n\n10 minutes\nContent:\n\nIntroduce dataset: “We’ll analyze comments about AI’s impact on society, like education and jobs”\n\nThe dataset now includes 30 varied comments, covering:\n\nPositive: e.g., “AI makes healthcare faster and more accurate, love it!”\nNegative: e.g., “I’m scared AI will control everything one day.”\nNeutral: e.g., “AI’s fine, but it makes mistakes sometimes.”\nComplex: e.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm), “AI is great, but only if it’s used ethically” (mixed emotions).\nComplex comments challenge lexicon-based approaches\n\nsarcasm (e.g. comment 7)\nmixed sentiments (e.g. comments 14, 25, 26, 30)\n\nAFINN may misinterpret due to its word-based scoring\n\n\n\nComments like “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm) may score positively due to words like “great” but are negative in context\nMixed comments (e.g., “AI makes life easier, but it’s a bit scary too”) combine positive and negative words, potentially leading to misleading scores\nRun colnames(comments) and nrow(comments)\nWrite down: Which comment seems happiest about AI? Most negative?\n\nExample: “AI is amazing” vs. “AI feels creepy”\n\nDiscussion (2 minutes):\n\nHow might these comments reflect real opinions about AI?\n\nExample: What might someone post about AI in movies or games?"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-3-exploring-the-dataset",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-3-exploring-the-dataset",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 3: Exploring the Dataset",
    "text": "Step 3: Exploring the Dataset\n\nObjective: Understand the dataset’s structure\n\n\n\n\nCode\ncolnames(comments)\nnrow(comments)\n\ncomments$text[1]\n\n\n\nTask 3.1: View Specific Comments\n\nRun ncol(comments) to check how many columns are in the dataset\n\nTask 3.2: View Specific Comments\n\nRun comments$text[4] to see the fourth comment\n\n\n\n\n5 min\nContent:\n\nDataset has id (comment number) and text (comment content)\nExploring data helps us know what we’re analyzing\n\nTask: View a Specific Comment\n\nRun comments$text[3]\n\nWhat does comment 3 say?\n\n\nPractice (3 minutes):\n\nRun comments$text[4]. What does it say?\n\nRun ncol(comments). How many columns in the dataset?\n\nWrite down: What does id tell us about each comment?\n\nDiscussion (2 minutes):\n\nWhy explore data before analyzing it?\n\nHow can comments about AI help us understand its societal role?"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-4-splitting-text-into-words",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-4-splitting-text-into-words",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 4: Splitting Text into Words",
    "text": "Step 4: Splitting Text into Words\n\nObjective: Learn tokenization to break text into words\nTokenization splits sentences into words\n\ne.g. “AI is cool” \\(\\rightarrow\\) {“AI,” “is,” “cool”}\nWords are the building blocks for (most) sentiment analysis\n\n\n\n\n\nCode\nwords &lt;- comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nTask 4.1: View Words\n\nprint(words)\n\nTask 4.2: How many words are there?\n\nRun nrow(words)\n\nTask 4.3: View First 5 Words\n\nRun head(words, 5)\n\nTask 4.4: How many unique words are there?\n\nRun n_distinct(words$word)\n\nTask 4.5: View Most Common Words\n\nRun words %&gt;% count(word, sort = TRUE) %&gt;% head(10)\n\nTask 4.6: How many times does “better” appear?\n\nRun words %&gt;% filter(word == \"better\")\n\n\n\n\n12 minutes\nGuess: Which words might show strong emotions?\n\nDiscussion\n\nWhy split text into words?\n\nHow might words like “amazing” or “creepy” reflect feelings about AI?\n\n\nwords %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE)"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-5-exploring-sentiment-lexicons",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-5-exploring-sentiment-lexicons",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons",
    "text": "Step 5: Exploring Sentiment Lexicons\n\nObjective: Understand how lexicons assign sentiment scores\nA lexicon is a dictionary scoring words’ emotions\n\nAFINN: -5 to +5\n\ne.g. “Happy” = +3, “scary” = -2\n\nAlternatives\n\nBing:\n\na binary classification + positive/negative\n\nNRC:\n\nemotion-based (e.g., joy, anger) and positive/negative classifications\n\n\n\nAI uses lexicons to quantify feelings in text\n\n\n\n12 minutes"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-5-exploring-sentiment-lexicons-continued",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-5-exploring-sentiment-lexicons-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons (continued)",
    "text": "Step 5: Exploring Sentiment Lexicons (continued)\n\nWe will use the AFINN lexicon, which assigns scores to words based on their sentiment\n\nPositive words have positive scores, negative words have negative scores\nNeutral words have a score of 0\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\n\n\n\nTask 5.1: View Lexicon\n\nRun: head(afinn, 10)\n\nTask 5.2: Check Scores for Specific Words\n\nRun: afinn %&gt;% filter(word == \"trust\")\nWhat’s its score?\n\nRun: afinn %&gt;% filter(word == \"bad\")\nGuess the score for “awesome”\nList two words you think are negative\n\n\n\n\nCheck with afinn %&gt;% filter(word == \"awesome\")\nCheck their scores with afinn %&gt;% filter(word %in% c(\"word1\", \"word2\"))\nDiscussion (2 minutes):\n\nHow does a lexicon help AI understand text?\n\nWhy might it miss complex emotions (e.g., “AI is cool but scary”)?\n\nget_sentiments(“bing”) or get_sentiments(“nrc”)"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-6-scoring-words-for-sentiment",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-6-scoring-words-for-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 6: Scoring Words for Sentiment",
    "text": "Step 6: Scoring Words for Sentiment\n\nObjective: Assign sentiment scores to words\nMatch dataset words to AFINN lexicon scores\n\nOnly words in the lexicon get scores\n\n\n\n\n\nCode\nsentiment_scores &lt;- words %&gt;%\n  inner_join(afinn, by = \"word\")\n\n\n\nTask 6.1: View Scores\n\nRun: print(sentiment_scores)\nList one positive and one negative word\n\nTask 6.2: Count Negative Words\n\nRun: sentiment_scores %&gt;% filter(value &lt; 0)\n\nTask 6.3: Count Positive Words\n\nRun: sentiment_scores %&gt;% filter(value &gt; 0)\n\n\n\n\nGuess: Why might some words (e.g., “AI”) not appear?\nDiscussion (2 minutes):\nHow do scores show opinions about AI?\n\nExample: How might negative scores about AI jobs affect workers?"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-7-summarizing-comment-sentiment",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-7-summarizing-comment-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 7: Summarizing Comment Sentiment",
    "text": "Step 7: Summarizing Comment Sentiment\n\nObjective: Calculate total sentiment for each comment\nSum word scores per comment to get its overall sentiment\n\nPositive total = positive comment\nNegative total = negative comment\n\n\n\n\n\nCode\ncomment_sentiment &lt;- sentiment_scores %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value)) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  arrange(id)\n\n\n\nTask 7.1: View Results\n\nRun print(comment_sentiment)\nWhich comment has the highest total_score? Lowest?\n\nTask 7.2: Sort by Total Score\n\nRun comment_sentiment %&gt;% arrange(desc(total_score))\nWhich is most positive?\n\nTask 7.3: Check Comment 18’s Score\n\nRead comment 18’s text and score\nDo they match?\n\nTask 7.4: Check Neutral Comments\n\nRun comment_sentiment %&gt;% filter(total_score == 0)\nAny neutral comments?\n\nTask 7.5: Add Sentiment Labels\n\nRun the following code\n\n\n\n\n\n\nCode\ncomment_sentiment &lt;- comment_sentiment %&gt;% \n  mutate(sentiment = case_when(is.na(total_score) ~ NA_character_,\n                               total_score &gt; 0 ~ \"Positive\", \n                               total_score &lt; 0 ~ \"Negative\",\n                               TRUE ~ \"Neutral\"))\n\n\n\n\nStep 7 - 15 minutes\nDiscussion (2 minutes):\n\nWhat do scores tell us about views on AI?\n\nExample: How might positive scores about AI in healthcare help doctors?\n\nTask 7.5: Add a New Comment\n\nAdd a new comment comments &lt;- comments %&gt;% add_row(id = 31, text = \"AI makes learning fun but can be confusing.\")\n\nWhat’s the new comment’s score?\n\nRun comment_sentiment %&gt;% filter(total_score &gt; 0) - How many positive comments?"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-8-visualizing-and-discussing-results",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-8-visualizing-and-discussing-results",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 8: Visualizing and Discussing Results",
    "text": "Step 8: Visualizing and Discussing Results\n\nObjective: Visualize sentiment and discuss AI’s societal impact\nCreate a bar plot to see positive/negative sentiments\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = id, y = total_score, fill = sentiment)) +\n  geom_bar(stat = \"identity\", na.rm = TRUE) +\n  geom_text(\n    data = filter(comment_sentiment, !is.na(total_score)),\n    aes(\n      label = total_score,\n      vjust = case_when(\n        total_score &gt;= 0 ~ -0.3,\n        total_score &lt; 0  ~ 1.3\n      )\n    )\n  ) +\n  geom_text(\n    data = filter(comment_sentiment, is.na(total_score)),\n    aes(y = 0, label = \"NA\"),\n    vjust = -0.3,\n    color = \"black\",\n    size = 2\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI usign AFINN\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"Negative\" = \"red\", \"Positive\" = \"blue\"),\n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE # don't show NA in the legend\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 8.1: Create Plot\n\nRun the plot code\n\nIdentify: Which comments are blue (positive)? Red (negative)?\n\nTask 8.2: Plot the density of sentiment distribution\n\nCreate a density plot of sentiment scores\nUse geom_density() to visualize the distribution\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = total_score, fill = sentiment)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Density Plot of Comment Sentiment Scores\",\n       x = \"Sentiment Score\", y = \"Density\") +\n  theme_minimal()\n\n\n\nTask 8.3: Plot the histogram of sentiment label\n\nCreate a histogram of sentiment labels\nUse geom_bar() to visualize counts of each sentiment label\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = sentiment, fill = sentiment)) +\n  geom_bar() +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -0.5\n  ) +\n  labs(title = \"Histogram of Sentiment Labels\",\n       x = \"Sentiment\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\nStep 8 - 24 minutes\nPractice (6 minutes)\n\nRun comment_sentiment %&gt;% filter(id == 7). Why might the sarcastic comment’s score be misleading?\nTry the Bing lexicon: Replace afinn with get_sentiments(“bing”) in Step 6 and rerun Steps 6–8\n\nCompare results"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-9-exploring-other-lexicon",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-9-exploring-other-lexicon",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon",
    "text": "Step 9: Exploring other Lexicon\nObjective: Explore Bing and NRC sentiment lexicons as alternatives to AFINN\n\nWhat are Bing and NRC? (recap)\n\nBing Lexicon:\n\nClassifies words as “positive” or “negative” only (no score)\n\nNRC Lexicon:\n\nAssigns words to emotions (joy, anger, fear, etc.) and positive/negative\n\n\nTasks: Load Bing and NRC Lexicons\n\n\n\n\nCode\nlibrary(tidytext)\n\nbing &lt;- get_sentiments(\"bing\")\n\nnrc &lt;- get_sentiments(\"nrc\")\n\n\n\nTask: View Lexicon Examples\n\n\n\n\n\nCode\nhead(bing, 10)\n\nhead(nrc, 10)\n\n\n\nTask: Join Words with Bing\n\n\n\n\n\nCode\nwords_bing &lt;- words %&gt;%\n  inner_join(bing, by = \"word\")\n\nwords_nrc &lt;- words %&gt;%\n  inner_join(nrc, by = \"word\")\n\n\n\n\nsome words show up more than 1 time\n\nword_counts &lt;- bing %&gt;% group_by(word) %&gt;% summarise(count = n()) %&gt;% filter(count &gt; 1)"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-9-exploring-other-lexicon-continued",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-9-exploring-other-lexicon-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon (continued)",
    "text": "Step 9: Exploring other Lexicon (continued)\n\nSummarize Sentiment by Comment (Bing)\n\n\n\n\nCode\ncomment_sentiment_bing &lt;- words_bing %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n      is.na(total_score) ~ NA_character_,\n      total_score &gt; 0 ~ \"Positive\",\n      total_score &lt; 0 ~ \"Negative\",\n      TRUE ~ \"Neutral\"\n    )) %&gt;% arrange(id)\n\n\n\n\n\nSummarize Sentiment by Comment (NRC)\n\n\n\n\n\nCode\nwords_nrc_pn &lt;- words_nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\"))\n\ncomment_sentiment_nrc &lt;- words_nrc_pn %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;%\n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n    is.na(total_score) ~ NA_character_,\n    total_score &gt; 0 ~ \"Positive\",\n    total_score &lt; 0 ~ \"Negative\",\n    TRUE ~ \"Neutral\"\n  )) %&gt;% arrange(id)\n\n\n\nTask 9.1: Compare Positive and Negative Comments\n\nRun comment_sentiment_bing %&gt;% filter(positive &gt; 0)\n\nRun comment_sentiment_nrc %&gt;% filter(positive &gt; 0)\n\nWhich comments are positive by Bing? Which by NRC?\n\nTask 9.2: Visualize Bing Results\n\nCreate bar plots to visualize positive and negative word counts per comment\nUse geom_bar() to show counts of positive and negative words\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(comment_sentiment_bing, aes(x = sentiment)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Histogram of Sentiment\", x = \"Sentiment\", y = \"Count\") +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), vjust = -0.5) +\n  theme_minimal()\n\n\n\nTask 9.3 compare Bing with AFINN\n\nCompare Bing and AFINN results\nCreate a comparison dataframe with both lexicons\nUse left_join() to merge AFINN and Bing results by comment ID\nIdentify comments where Bing and AFINN disagree\n\n\n\n\n\n\nCode\ncomparison_df2 &lt;- comments %&gt;% \n  left_join(comment_sentiment_bing %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_bing = sentiment) %&gt;%\n  left_join(comment_sentiment %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_afinn = sentiment)\n\ncomparison_df2\n\n# show the comments where Bing and AFINN disagree\n\ncomparison_df2 %&gt;%\n  filter(sentiment_bing != sentiment_afinn | is.na(sentiment_bing) != is.na(sentiment_afinn))\n\n\n\n\nBing\n\n\n\nCode\nggplot(comment_sentiment_bing, \n       aes(x = id, y = total_score, fill = total_score &gt; 0)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = total_score),\n    vjust = -0.3\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI using Bing lexicon\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"red\", \"blue\"), \n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 9.3: Visualize NRC Emotions\n\nTry visualizing NRC emotions (joy, anger, etc.) using a bar plot\n\nUse geom_bar() to show counts of each emotion per comment\nExample code:\n\n\n\n. . .\n\n\nCode\nwords_nrc_emotions &lt;- words_nrc %&gt;%\n    filter(!sentiment %in% c(\"positive\", \"negative\")) %&gt;%\n    group_by(id, sentiment) %&gt;%\n    summarise(word_count = n(), .groups = \"drop\")\n\nggplot(words_nrc_emotions, aes(x = sentiment, y = word_count, fill = sentiment)) +\n    geom_bar(stat = \"identity\") +\n    facet_wrap(~id, ncol = 6) +\n    labs(title = \"NRC Emotions per Comment\", x = \"Emotion\", y = \"Word Count\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\nTask 9.4: Discuss Lexicon Differences\n\nWhich lexicon (AFINN, Bing, NRC) seems best for your dataset?\n\nConsider factors like vocabulary coverage, sentiment granularity, and performance on your specific comments.\n\n\nTask 9.5: Discuss Nuance and Sarcasm\n\nDoes NRC capture more nuance?\n\nHow do results compare for sarcasm or mixed comments?\nDiscuss how NRC’s emotion-based approach might better capture complex sentiments like sarcasm or mixed emotions compared to AFINN or Bing\n\n\nTask 9.6: Discuss Lexicon Limitations\n\nDiscuss how lexicons like AFINN and Bing may struggle with sarcasm or mixed sentiments\n\ne.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN might score “great” positively, missing the sarcasm"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-10-sentiment-analysis-with-ollama",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-10-sentiment-analysis-with-ollama",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10 Sentiment Analysis with Ollama",
    "text": "Step 10 Sentiment Analysis with Ollama\n\nObjective: Use Ollama with Llama 3.2:3b to perform sentiment analysis\nOllama runs large language models (LLMs) like Llama 3.2:3b locally\n\noffering nuanced sentiment analysis by understanding context\n\n\n\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\nLoad Ollama\n\n\n\n\n\nCode\nlibrary(ollamar)\n\ntest_connection()\n\nlist_models()\n\n#pull(\"llama3.1\")  # download a model (equivalent bash code: ollama run llama3.1)\n\n\n\ntesting\n\n\n\n\n\nCode\n# generate a response/text based on a prompt; returns an httr2 response by default\nresp &lt;- generate(model=\"llama3.2:3b\", prompt=\"tell me a 50-word story\")\nresp\n\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-10-sentiment-analysis-with-ollama-continued",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-10-sentiment-analysis-with-ollama-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10 Sentiment Analysis with Ollama (continued)",
    "text": "Step 10 Sentiment Analysis with Ollama (continued)\n\nDefine the function to get sentiment using Ollama\n\n\n\n\nCode\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as Positive, Negative, or Neutral, and respond with only the label:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\n\n\nTask 9.1: Test the Function\n\nRun get_sentiment_ollama(\"AI is amazing and will make education so much better!\")\nWhat sentiment does it return?\n\nTask 9.2: Analyze All Comments\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncomments_ollama &lt;- comments %&gt;% mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-11-compare-with-lexicon-based-approach",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-11-compare-with-lexicon-based-approach",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Compare with lexicon-based approach",
    "text": "Step 11: Compare with lexicon-based approach\n\nCompare with lexicon to see differences\n\nespecially in complex comments (e.g. sarcasm, mixed emotions)\n\nAdd to comment_sentiment and categorize lexicon sentiments\n\n\n\n\nCode\ncomment_sentiment3 &lt;- comparison_df2 %&gt;% \n  left_join(comments_ollama %&gt;% select(id, sentiment_ollama), by = \"id\")\n\n\n\nTask 11.1: Visualize Sentiment Comparison\n\n\n\n\n\nCode\nlibrary(tidyr)\n\ncomparison3 &lt;- comment_sentiment3 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing, sentiment_ollama) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing, sentiment_ollama), \n               names_to = \"method\", \n               values_to = \"sentiment\")\n\ncomparison_counts3 &lt;- comparison3 %&gt;%\n  count(method, sentiment)\n\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Sentiment Distribution Comparison\", \n       x = \"Sentiment\", y = \"Count\") +\n  scale_fill_manual(name = \"Method\",\n                    values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"), \n                    labels = c(\"AFINN (Lexicon)\", \"Bing (Lexicon)\", \"llama3.2:3b (LLM)\")) +\n  scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3)) +\n  theme_minimal()\n\n\n\n\ngeom_text(aes(label = n), position = position_dodge(width = 0.45), hjust= 1., vjust = -0.5) +\n\nlibrary(ggplot2)\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) + geom_bar(stat = “identity”, position = “dodge”, color = “black”, linewidth = 0.2) + geom_text(aes(label = n), position = position_dodge(width = 0.45), vjust = -0.5, size = 3.5, fontface = “bold”) + labs(title = “Comparison of Sentiment Distribution Across Methods”, subtitle = “Counts of Sentiment Categories by Analysis Method”, x = “Sentiment Category”, y = “Number of Comments”, caption = “Data source: Sentiment analysis of comments using AFINN, Bing, and Ollama”) + scale_fill_manual(name = “Sentiment Analysis Method”, values = c(“#1b9e77”, “#d95f02”, “#7570b3”), labels = c(“Lexicon (AFINN)”, “Lexicon (Bing)”, “Ollama (LLM)”)) + scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3), expand = expansion(mult = c(0, 0.1))) + theme_minimal(base_size = 14) + theme( plot.title = element_text(face = “bold”, size = 16, hjust = 0.5), plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)), plot.caption = element_text(size = 10, hjust = 0, color = “grey50”), axis.title = element_text(face = “bold”), axis.text = element_text(color = “black”), legend.position = “top”, legend.title = element_text(face = “bold”, size = 12), legend.text = element_text(size = 10), panel.grid.major.x = element_blank(), panel.grid.minor = element_blank(), plot.margin = margin(10, 10, 10, 10) )"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#step-11-compare-with-lexicon-based-approach-continued",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#step-11-compare-with-lexicon-based-approach-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: compare with lexicon-based approach (continued)",
    "text": "Step 11: compare with lexicon-based approach (continued)\n\nTask 11.2: Identify Differing Comments\n\nFind comments where sentiment_lexicon != sentiment_ollama\n\n\n\n\n\nCode\ndiffering_comments &lt;- comment_sentiment3 %&gt;%\n  filter(sentiment_afinn != sentiment_ollama | sentiment_bing !=sentiment_ollama | sentiment_afinn != sentiment_ollama) %&gt;%\n  select(id, text, sentiment_afinn, sentiment_bing, sentiment_ollama)\n\nprint(differing_comments)\n\n\n\nTask 11.3: Examine Specific Comments\n\nRun comment_sentiment %&gt;% filter(id %in% c(7, 14, 26))\nWhy might the lexicon and LLM differ for these comments?\n\nDiscuss how LLMs capture context (e.g., sarcasm) better than lexicons\n\n\n\n\n\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm)\nID 14: “AI is overhyped, it’s not as smart as people think.” (mixed)\nID 26: “AI makes life easier, but it’s a bit scary too.” (mixed)\nDiscussion\n\nWhy do comments like ID 7 (sarcasm) differ?\n\nLexicon may score “great” positively\nbut Llama 3.2:3b detects sarcasm.\n\n\nComments with Significant Differences\n\nThe following comments are likely to show discrepancies between AFINN and Llama 3.2:3b, as highlighted in Task 9.3:\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN: Positive (due to “great” +3, “solve” +2), ignoring sarcastic “yeah, right.”\nLlama 3.2:3b: Negative, detecting sarcasm through context.\n\nWhy Different: Lexicons score words individually, missing tone; LLMs analyze full sentences.\n\n\nID 14: “AI is overhyped, it’s not as smart as people think.”\n\nAFINN: Neutral or negative (e.g., “overhyped” -2, “smart” +2 may cancel out).\nLlama 3.2:3b: Negative, recognizing critical intent.\nWhy Different: AFINN averages word scores; Llama 3.2:3b captures overall sentiment.\n\nID 26: “AI makes life easier, but it’s a bit scary too.”\n\nAFINN: Neutral (e.g., “easier” +2, “scary” -2 balance out).\nLlama 3.2:3b: Negative or mixed, emphasizing “scary” in context.\n\nWhy Different: Lexicons struggle with mixed emotions; LLMs weigh context.\n\nThese differences spark discussion in Step 9 about lexicon limitations (e.g., missing sarcasm) and LLM strengths (e.g., contextual understanding\nHow do LLMs improve on lexicons for complex sentiments?\n\nWhat are the trade-offs (e.g., LLM complexity vs. lexicon simplicity)?\n\nNote for Facilitators: Ensure Ollama is installed and Llama 3.2:3b is pulled (ollama pull llama3.2:3b)\n\nThis step may take longer due to LLM processing\n\nconsider pre-computing results or running on a subset if time is limited\n\nRun comment_sentiment %&gt;% filter(id == 14). Why might the lexicon and LLM differ\n\nTry the NRC lexicon: Replace afinn with get_sentiments(“nrc”) in Step 6\n\n(adjust for emotion categories) and rerun Steps 6–8\nCompare with Ollama\nHighlight how LLMs capture context (e.g., sarcasm in ID 7) better than lexicons"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#more-discussion",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#more-discussion",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "More Discussion",
    "text": "More Discussion\n\nShare one comment and its score\n\nDoes it match the text’s tone?\n\nHow does sentiment analysis help understand AI’s societal impact?\nCompanies: Improve AI based on feedback\n\ne.g. if many comments are negative about AI in jobs, they can address concerns\n\nGovernments\n\nAddress fears about AI privacy or jobs\n\nSociety: Highlight excitement for AI in education or healthcare\nWrap-up Questions:\n\nWhat surprised you about the comments?\nHow might sentiment analysis help shape AI’s future in society?\nWhat are the limits of sentiment analysis?\n\n\n\n\ne.g. it might miss sarcasm or cultural nuances"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#takeaway",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#takeaway",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Takeaway",
    "text": "Takeaway\n\nSentiment analysis is an AI tool to understand emotions in text\nYou’ve learned R to\n\nload data\ntokenize\nscore and classify sentiments\nvisualize sentiments"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#resources",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#resources",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science\nTidytext Book\nKaggle - Search “Twitter sentiment” for practice datasets\n\n\n\nFacilitator Notes\n\nPreparation\n\nEnsure R and RStudio are installed. Pre-install packages (tidyverse, tidytext, textdata) to save time\n\nDataset\n\nSmall, fictional dataset keeps it simple. For advanced students, consider a real dataset (e.g., tweets) in a follow-up\n\n\nPacing\n\nEach step is 10–12 minutes, with 24 minutes for Step 8. Skip one practice task per step if running over\nTotal: ~95 minutes hands-on + ~15 minutes discussion = ~110 minutes\n\n\nEngagement\n\nEncourage sharing in discussions to connect to real-world AI issues\n\nTroubleshooting: Assist with RStudio (console vs. script) and package errors"
  },
  {
    "objectID": "Hands_on_Workshop_Sentiment_Analysis.html#assignment-real-world-sentiment-analysis-practice",
    "href": "Hands_on_Workshop_Sentiment_Analysis.html#assignment-real-world-sentiment-analysis-practice",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Assignment: Real-World Sentiment Analysis Practice",
    "text": "Assignment: Real-World Sentiment Analysis Practice\nAnalyze Social Media Data with Lexicon and LLM Methods\n\nObjective: Practice everything learned using a real-world dataset\nStep 1: Download and Load Data\n\n\n\n\nCode\nlibrary(tidyverse)\n\nreal_comments &lt;- read_csv(\"https://raw.githubusercontent.com/laxmimerit/All-CSV-ML-Data-Files-Download/refs/heads/master/twitter_sentiment.csv\", col_names = c(\"id\",\"entity\", \"sentiment\", \"text\"))\n\nhead(real_comments)\n\n\n\nStep 2: Tokenize and Clean Data\n\n\n\n\n\nCode\nlibrary(tidytext)\nreal_words &lt;- real_comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nStep 3: Compare Lexicons among AFINN, Bing and NRC\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\nbing &lt;- get_sentiments(\"bing\")\nnrc &lt;- get_sentiments(\"nrc\")\n\n# Join and score with AFINN\nreal_sentiment_afinn &lt;- real_words %&gt;%\n  inner_join(afinn, by = \"word\") %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value, na.rm = TRUE))\n\n# Join and score with Bing\nreal_sentiment_bing &lt;- real_words %&gt;%\n  inner_join(bing, by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n# Join and score with NRC (positive/negative)\nreal_sentiment_nrc &lt;- real_words %&gt;%\n  inner_join(nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\")), by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n\n\nStep 4: Visualize Results\n\n\n\n\n\nCode\n# AFINN\nlibrary(ggplot2)\nggplot(real_sentiment_afinn, aes(x = id, y = total_score)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"AFINN Sentiment Scores\", x = \"Comment ID\", y = \"Score\") +\n  theme_minimal()\n\n# Bing\nggplot(real_sentiment_bing, aes(x = id)) +\n  geom_bar(aes(y = positive), stat = \"identity\", fill = \"blue\", alpha = 0.5) +\n  geom_bar(aes(y = -negative), stat = \"identity\", fill = \"red\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Positive vs Negative\", x = \"Comment ID\", y = \"Word Count\") +\n  theme_minimal()\n\n\n\nStep 5: (Optional) Use Ollama/LLM for Sentiment\n\n\n\n\n\nCode\n# If you have Ollama and Llama3 installed:\nlibrary(ollamar)\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as positive, negative, or neutral, and respond with only the label in lower case:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\nreal_comments &lt;- real_comments %&gt;%\n  mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))\n\n\n\n\n\nStep 6: Compare and Discuss\nCompare lexicon and LLM results\nWhich method best handles sarcasm, mixed emotions, or context?\nWrite a short paragraph (3–5 sentences) on your findings\n\n\n\nDeliverables:\n\nR script with code for all steps\n\nPlots comparing sentiment by method\n\nShort discussion of your results\n\nBonus:\n\nTry analyzing sentiment on comments about another societal topic (e.g. climate change, education, public health)"
  },
  {
    "objectID": "slide_link.html",
    "href": "slide_link.html",
    "title": "slides",
    "section": "",
    "text": "Download slides for the HKU Social Science Summer Programme:\n\n\n\n\n\n\nSlides\n\n\n\n\nSentiment Analysis with R\nRecommender Systems with R"
  },
  {
    "objectID": "slide_link.html#course-slides",
    "href": "slide_link.html#course-slides",
    "title": "Course slides",
    "section": "",
    "text": "Download slide decks for the HKU Social Science Summer Programme:\n\n\n\n\n\n\nNote\n\n\n\n\nElements of Sentiment Analysis\n&lt;a href=“Workshop_Sentiment_Analysis_R.html download&gt;Sentiment Analysis with R"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#overview",
    "href": "Workshop_Sentiment_Analysis_R.html#overview",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Overview",
    "text": "Overview\n\nThis 2-hour workshop introduces high school students to sentiment analysis using R in RStudio\nwe will analyze social media comments about AI’s societal impact\n\nlearning basic R commands\nexploring how sentiment analysis reveals public opinions\n\nRoadmap\n\nbackground on sentiment analysis\nhands-on tasks\ndiscussions linking AI to society\n\nLearning Goals:\n\nUnderstand sentiment analysis and how AI can enhance it\nLearn basic R commands for text analysis\nAnalyze sentiments in comments about AI’s societal impact\nDiscuss how sentiment analysis informs AI’s role in society\n\n\n\nPrerequisites: No R experience needed. Students need R and RStudio installed.\nMaterials: Laptops with R and RStudio, a simple dataset (provided in code)."
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#background-sentiment-analysis-and-ai-in-society",
    "href": "Workshop_Sentiment_Analysis_R.html#background-sentiment-analysis-and-ai-in-society",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nWhat is Sentiment Analysis?\n\nSentiment analysis is an AI technique that identifies emotions in text\n\ncommonly label them\n\npositive\n\ne.g. I love this!\n\nnegative\n\ne.g. This is scary\n\nneutral\n\ne.g. It’s fine\n\n\n\n\nit is used to understand public opinions/public attitudes\n\ne.g. how people feel about AI in education, jobs, or healthcare"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#background-sentiment-analysis-and-ai-in-society-1",
    "href": "Workshop_Sentiment_Analysis_R.html#background-sentiment-analysis-and-ai-in-society-1",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nHow it Works:\n\nLexicon-based\n\nUses a dictionary to assign labels/scores to words\n\ne.g., awesome \\(\\rightarrow\\) positive; worried \\(\\rightarrow\\) negative\n\nWe mainly focus on this approach today for simplicity\n\nMachine Learning-based\n\nTrains machine learning models on labeled data to predict sentiment\n\ne.g., “I love AI!” → positive, “AI is scary” → negative\n\nMore complex but powerful\n\nAdvanced AI\n\nLLM models (like ChatGPT, Deepseek)\nit analyze context for higher accuracy, but they are complex"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#background-sentiment-analysis-and-ai-in-society-2",
    "href": "Workshop_Sentiment_Analysis_R.html#background-sentiment-analysis-and-ai-in-society-2",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nConnection to AI and Society:\n\nSentiment analysis reveals public attitudes toward AI and products, helping understand its societal impact.\n\nExamples:\n\nCompanies analyze tweets to improve their products\nGovernments study comments to address concerns about the satisfaction of its public services\n\nResearchers explore how AI in healthcare is perceived\n\ne.g. trust in AI diagnostics\n\n\n\nBy analyzing text, we learn what excites or worries people, driving further development to benefit society\n\n\n\nAI is transforming society—powering education tools, automating jobs, and aiding doctors\nUnderstanding public sentiment ensures AI is developed responsibly, addressing fears (e.g., privacy) and amplifying benefits\n\ne.g., better learning"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-1-introduction-and-setup",
    "href": "Workshop_Sentiment_Analysis_R.html#step-1-introduction-and-setup",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 1: Introduction and Setup",
    "text": "Step 1: Introduction and Setup\n\nObjective: set up RStudio\nTask 1.1: Open RStudio\n\nOpen RStudio\n\nCreate a new R script: File &gt; New File &gt; R Script\n\nSave as sentiment_workshop.R if needed\n\n\nTask 1.2: Install Packages\n\nRun in the console\n\n\n\n\n\nCode\n# Install necessary packages for sentiment analysis\ninstall.packages(c(\"tidyverse\", \"tidytext\", \"textdata\"))\n\n\n\nnote: tidyverse for data tasks; tidytext for text analysis; textdata for sentiment dictionaries\n\n\n\nStep 1 - 10 minutes\nEnsure textdata package is installed, as it provides AFINN, Bing, and NRC lexicons\nContent:\n\nExplain sentiment analysis: “It’s like teaching a computer to read emotions in text, like excitement or fear about AI.”\nLink to AI and Society: “We’ll analyze comments about AI to see how people feel about its impact on jobs or schools.”\n\nRStudio basics: Console (for commands), script editor (for saving code)\n\nPractice (3 minutes):\nType print(“Hello, I’m learning R!”) in the console and press Enter. What happens?\n\nGuess: What sentiment score might “excited” have in a dictionary? “Sad”?\n\nDiscussion (2 minutes):\n\nWhy study sentiments about AI?\n\nExample: How could knowing if people love or fear AI in schools help teachers?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-2-loading-tools-and-data",
    "href": "Workshop_Sentiment_Analysis_R.html#step-2-loading-tools-and-data",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 2: Loading Tools and Data",
    "text": "Step 2: Loading Tools and Data\n\nObjective: Load R packages and a dataset of comments\nDataset\n\nFictional social media comments about AI’s societal impact\n\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(textdata)\n\ncomments &lt;- tibble(\n  id = 1:30,\n  text = c(\n    \"AI is amazing and will make education so much better!\",\n    \"I’m worried AI will take over jobs and leave people unemployed.\",\n    \"AI helps doctors save lives, it’s a game-changer.\",\n    \"I don’t trust AI, it feels creepy and invasive.\",\n    \"AI is okay, but it needs regulation to be safe.\",\n    \"AI in schools is cool, but it’s not perfect.\",\n    \"Wow, AI is so great, it’ll solve all our problems… yeah, right!\",  # Sarcasm\n    \"AI makes healthcare faster and more accurate, love it!\",\n    \"Why does AI know so much about me? It’s unsettling.\",\n    \"AI chatbots are fun to talk to, but sometimes useless.\",\n    \"AI in movies is awesome, makes everything so realistic!\",\n    \"I’m scared AI will control everything one day.\",\n    \"AI helps me study better, it’s like a personal tutor.\",\n    \"AI is overhyped, it’s not as smart as people think.\",  # Mixed\n    \"Using AI for art is creative and inspiring!\",\n    \"AI in cars? No way, I don’t trust self-driving tech.\",\n    \"AI makes my phone so smart, it’s incredible!\",\n    \"I feel like AI is watching me all the time, creepy.\",\n    \"AI in gaming makes battles so epic, I’m hooked!\",\n    \"AI might replace teachers, and that’s not cool.\",\n    \"AI saves time at work, but I miss human interaction.\",\n    \"AI’s fine, but it makes mistakes sometimes.\",  # Neutral\n    \"AI in music creation is a total game-changer!\",\n    \"I’m skeptical about AI making fair decisions.\",\n    \"AI is great, but only if it’s used ethically.\",  # Mixed\n    \"AI makes life easier, but it’s a bit scary too.\",  # Mixed\n    \"AI in agriculture boosts crops, amazing stuff!\",\n    \"I don’t get why everyone loves AI so much.\",  # Negative\n    \"AI tutors are helpful, but they don’t replace real teachers.\",\n    \"AI sounds cool, but I’m not sure it’s safe.\"  # Mixed\n  )\n)\n\n\n\nTask 2.1: Run the Code\n\nRun the code (highlight and press Ctrl+Enter)\n\nTask 2.2: View the Data\n\nprint(comments)\n\nTask 2.3: View comments\n\nRun view(comments) in the console\n\nHow many comments are there?\n\n\n\n\n\n10 minutes\nContent:\n\nIntroduce dataset: “We’ll analyze comments about AI’s impact on society, like education and jobs”\n\nThe dataset now includes 30 varied comments, covering:\n\nPositive: e.g., “AI makes healthcare faster and more accurate, love it!”\nNegative: e.g., “I’m scared AI will control everything one day.”\nNeutral: e.g., “AI’s fine, but it makes mistakes sometimes.”\nComplex: e.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm), “AI is great, but only if it’s used ethically” (mixed emotions).\nComplex comments challenge lexicon-based approaches\n\nsarcasm (e.g. comment 7)\nmixed sentiments (e.g. comments 14, 25, 26, 30)\n\nAFINN may misinterpret due to its word-based scoring\n\n\n\nComments like “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm) may score positively due to words like “great” but are negative in context\nMixed comments (e.g., “AI makes life easier, but it’s a bit scary too”) combine positive and negative words, potentially leading to misleading scores\nRun colnames(comments) and nrow(comments)\nWrite down: Which comment seems happiest about AI? Most negative?\n\nExample: “AI is amazing” vs. “AI feels creepy”\n\nDiscussion (2 minutes):\n\nHow might these comments reflect real opinions about AI?\n\nExample: What might someone post about AI in movies or games?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-3-exploring-the-dataset",
    "href": "Workshop_Sentiment_Analysis_R.html#step-3-exploring-the-dataset",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 3: Exploring the Dataset",
    "text": "Step 3: Exploring the Dataset\n\nObjective: Understand the dataset’s structure\n\n\n\n\nCode\ncolnames(comments)\nnrow(comments)\n\ncomments$text[1]\n\n\n\nTask 3.1: View Specific Comments\n\nRun ncol(comments) to check how many columns are in the dataset\n\nTask 3.2: View Specific Comments\n\nRun comments$text[4] to see the fourth comment\n\n\n\n\n5 min\nContent:\n\nDataset has id (comment number) and text (comment content)\nExploring data helps us know what we’re analyzing\n\nTask: View a Specific Comment\n\nRun comments$text[3]\n\nWhat does comment 3 say?\n\n\nPractice (3 minutes):\n\nRun comments$text[4]. What does it say?\n\nRun ncol(comments). How many columns in the dataset?\n\nWrite down: What does id tell us about each comment?\n\nDiscussion (2 minutes):\n\nWhy explore data before analyzing it?\n\nHow can comments about AI help us understand its societal role?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-4-splitting-text-into-words",
    "href": "Workshop_Sentiment_Analysis_R.html#step-4-splitting-text-into-words",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 4: Splitting Text into Words",
    "text": "Step 4: Splitting Text into Words\n\nObjective: Learn tokenization to break text into words\nTokenization splits sentences into words\n\ne.g. “AI is cool” \\(\\rightarrow\\) {“AI,” “is,” “cool”}\nWords are the building blocks for (most) sentiment analysis\n\n\n\n\n\nCode\nwords &lt;- comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nTask 4.1: View Words\n\nprint(words)\n\nTask 4.2: How many words are there?\n\nRun nrow(words)\n\nTask 4.3: View First 5 Words\n\nRun head(words, 5)\n\nTask 4.4: How many unique words are there?\n\nRun n_distinct(words$word)\n\nTask 4.5: View Most Common Words\n\nRun words %&gt;% count(word, sort = TRUE) %&gt;% head(10)\n\nTask 4.6: How many times does “better” appear?\n\nRun words %&gt;% filter(word == \"better\")\n\n\n\n\n12 minutes\nGuess: Which words might show strong emotions?\n\nDiscussion\n\nWhy split text into words?\n\nHow might words like “amazing” or “creepy” reflect feelings about AI?\n\n\nwords %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-5-exploring-sentiment-lexicons",
    "href": "Workshop_Sentiment_Analysis_R.html#step-5-exploring-sentiment-lexicons",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons",
    "text": "Step 5: Exploring Sentiment Lexicons\n\nObjective: Understand how lexicons assign sentiment scores\nA lexicon is a dictionary scoring words’ emotions\n\nAFINN: -5 to +5\n\ne.g. “Happy” = +3, “scary” = -2\n\nAlternatives\n\nBing:\n\na binary classification: positive/negative\n\nNRC:\n\nemotion-based (e.g. joy, anger) and positive/negative classifications\n\n\n\nHere, AI uses lexicons to quantify feelings in text\n\n\n\n12 minutes"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-5-exploring-sentiment-lexicons-continued",
    "href": "Workshop_Sentiment_Analysis_R.html#step-5-exploring-sentiment-lexicons-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons (continued)",
    "text": "Step 5: Exploring Sentiment Lexicons (continued)\n\nWe will use the AFINN lexicon, which assigns scores to words based on their sentiment\n\nPositive words have positive scores, negative words have negative scores\nNeutral words have a score of 0\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\n\n\n\nTask 5.1: View Lexicon\n\nRun: head(afinn, 10)\n\nTask 5.2: Check Scores for Specific Words\n\nRun: afinn %&gt;% filter(word == \"trust\")\nWhat’s its score?\n\nRun: afinn %&gt;% filter(word == \"bad\")\nGuess the score for “awesome”\nList two words you think are negative\n\n\n\n\nCheck with afinn %&gt;% filter(word == \"awesome\")\nCheck their scores with afinn %&gt;% filter(word %in% c(\"word1\", \"word2\"))\nDiscussion (2 minutes):\n\nHow does a lexicon help AI understand text?\n\nWhy might it miss complex emotions (e.g., “AI is cool but scary”)?\n\nget_sentiments(“bing”) or get_sentiments(“nrc”)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-6-scoring-words-for-sentiment",
    "href": "Workshop_Sentiment_Analysis_R.html#step-6-scoring-words-for-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 6: Scoring Words for Sentiment",
    "text": "Step 6: Scoring Words for Sentiment\n\nObjective: Assign sentiment scores to words\nMatch dataset words to AFINN lexicon scores\n\nOnly words in the lexicon get scores\n\n\n\n\n\nCode\nsentiment_scores &lt;- words %&gt;%\n  inner_join(afinn, by = \"word\")\n\n\n\nTask 6.1: View Scores\n\nRun: print(sentiment_scores)\nList one positive and one negative word\n\nTask 6.2: Count Negative Words\n\nRun: sentiment_scores %&gt;% filter(value &lt; 0)\n\nTask 6.3: Count Positive Words\n\nRun: sentiment_scores %&gt;% filter(value &gt; 0)\n\n\n\n\nGuess: Why might some words (e.g., “AI”) not appear?\nDiscussion (2 minutes):\nHow do scores show opinions about AI?\n\nExample: How might negative scores about AI jobs affect workers?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-7-summarizing-comment-sentiment",
    "href": "Workshop_Sentiment_Analysis_R.html#step-7-summarizing-comment-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 7: Summarizing Comment Sentiment",
    "text": "Step 7: Summarizing Comment Sentiment\n\nObjective: Calculate total sentiment for each comment\nSum word scores per comment to get its overall sentiment\n\nPositive total = Sum of positive comments (scores)\nNegative total = Sun of negative comments (scores)\nsentiment = positive total - negative total\n\n\n\n\n\nCode\ncomment_sentiment &lt;- sentiment_scores %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value)) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  arrange(id)\n\n\n\nTask 7.1: View Results\n\nRun print(comment_sentiment)\nWhich comment has the lowest score?\n\nTask 7.2: Sort by Total Score\n\nRun comment_sentiment %&gt;% arrange(desc(total_score))\nWhich is most positive?\n\nTask 7.3: Check Comment 18’s Score\n\nRead comment 18’s text and score\nDo they match?\n\nTask 7.4: Check Neutral Comments\n\nRun comment_sentiment %&gt;% filter(total_score == 0)\nAny neutral comments?\n\nTask 7.5: Add Sentiment Labels\n\nRun the following code\n\n\n\n\n\n\nCode\ncomment_sentiment &lt;- comment_sentiment %&gt;% \n  mutate(sentiment = case_when(is.na(total_score) ~ NA_character_,\n                               total_score &gt; 0 ~ \"Positive\", \n                               total_score &lt; 0 ~ \"Negative\",\n                               TRUE ~ \"Neutral\"))\n\n\n\n\nStep 7 - 15 minutes\nDiscussion (2 minutes):\n\nWhat do scores tell us about views on AI?\n\nExample: How might positive scores about AI in healthcare help doctors?\n\nTask 7.5: Add a New Comment\n\nAdd a new comment comments &lt;- comments %&gt;% add_row(id = 31, text = \"AI makes learning fun but can be confusing.\")\n\nWhat’s the new comment’s score?\n\nRun comment_sentiment %&gt;% filter(total_score &gt; 0) - How many positive comments?\n\n\ntable(comment_sentiment$sentiment, useNA=“ifany”)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-8-visualizing-and-discussing-results",
    "href": "Workshop_Sentiment_Analysis_R.html#step-8-visualizing-and-discussing-results",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 8: Visualizing and Discussing Results",
    "text": "Step 8: Visualizing and Discussing Results\n\nObjective: Visualize sentiment and discuss AI’s societal impact\nCreate a bar plot to see positive/negative sentiments\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = id, y = total_score, fill = sentiment)) +\n  geom_bar(stat = \"identity\", na.rm = TRUE) +\n  geom_text(\n    data = filter(comment_sentiment, !is.na(total_score)),\n    aes(\n      label = total_score,\n      vjust = case_when(\n        total_score &gt;= 0 ~ -0.3,\n        total_score &lt; 0  ~ 1.3\n      )\n    )\n  ) +\n  geom_text(\n    data = filter(comment_sentiment, is.na(total_score)),\n    aes(y = 0, label = \"NA\"),\n    vjust = -0.3,\n    color = \"black\",\n    size = 2\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI usign AFINN\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"Negative\" = \"red\", \"Positive\" = \"blue\"),\n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE # don't show NA in the legend\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 8.1: Create Plot\n\nRun the plot code\n\nIdentify: Which comments are blue (positive)? Red (negative)?\n\nTask 8.2: Plot the density of sentiment distribution\n\nCreate a density plot of sentiment scores\nUse geom_density() to visualize the distribution\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = total_score, fill = sentiment)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Density Plot of Comment Sentiment Scores\",\n       x = \"Sentiment Score\", y = \"Density\") +\n  theme_minimal()\n\n\n\nTask 8.3: Plot the histogram of sentiment label\n\nCreate a histogram of sentiment labels\nUse geom_bar() to visualize counts of each sentiment label\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = sentiment, fill = sentiment)) +\n  geom_bar() +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -0.5\n  ) +\n  labs(title = \"Histogram of Sentiment Labels\",\n       x = \"Sentiment\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\nStep 8 - 24 minutes\nPractice (6 minutes)\n\nRun comment_sentiment %&gt;% filter(id == 7). Why might the sarcastic comment’s score be misleading?\nTry the Bing lexicon: Replace afinn with get_sentiments(“bing”) in Step 6 and rerun Steps 6–8\n\nCompare results"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-9-exploring-other-lexicon",
    "href": "Workshop_Sentiment_Analysis_R.html#step-9-exploring-other-lexicon",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon",
    "text": "Step 9: Exploring other Lexicon\nObjective: Explore Bing and NRC sentiment lexicons as alternatives to AFINN\n\nWhat are Bing and NRC? (recap)\n\nBing Lexicon:\n\nClassifies words as “positive” or “negative” only (no score)\n\nNRC Lexicon:\n\nAssigns words to emotions (joy, anger, fear, etc.) and positive/negative\n\n\nTasks: Load Bing and NRC Lexicons\n\n\n\n\nCode\nlibrary(tidytext)\n\nbing &lt;- get_sentiments(\"bing\")\n\nnrc &lt;- get_sentiments(\"nrc\")\n\n\n\nTask: View Lexicon Examples\n\n\n\n\n\nCode\nhead(bing, 10)\n\nhead(nrc, 10)\n\n\n\nTask: Join Words with Bing\n\n\n\n\n\nCode\nwords_bing &lt;- words %&gt;%\n  inner_join(bing, by = \"word\")\n\nwords_nrc &lt;- words %&gt;%\n  inner_join(nrc, by = \"word\")\n\n\n\n\nsome words show up more than 1 time\n\nword_counts &lt;- bing %&gt;% group_by(word) %&gt;% summarise(count = n()) %&gt;% filter(count &gt; 1)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-9-exploring-other-lexicon-continued",
    "href": "Workshop_Sentiment_Analysis_R.html#step-9-exploring-other-lexicon-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon (continued)",
    "text": "Step 9: Exploring other Lexicon (continued)\n\nSummarize Sentiment by Comment (Bing)\n\n\n\n\nCode\ncomment_sentiment_bing &lt;- words_bing %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n      is.na(total_score) ~ NA_character_,\n      total_score &gt; 0 ~ \"Positive\",\n      total_score &lt; 0 ~ \"Negative\",\n      TRUE ~ \"Neutral\"\n    )) %&gt;% arrange(id)\n\n\n\n\n\nSummarize Sentiment by Comment (NRC)\n\n\n\n\n\nCode\nwords_nrc_pn &lt;- words_nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\"))\n\ncomment_sentiment_nrc &lt;- words_nrc_pn %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;%\n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n    is.na(total_score) ~ NA_character_,\n    total_score &gt; 0 ~ \"Positive\",\n    total_score &lt; 0 ~ \"Negative\",\n    TRUE ~ \"Neutral\"\n  )) %&gt;% arrange(id)\n\n\n\nTask 9.1: Compare Positive and Negative Comments\n\nRun comment_sentiment_bing %&gt;% filter(total_score &gt; 0)\n\nRun comment_sentiment_nrc %&gt;% filter(total_score &gt; 0)\n\nWhich comments are positive by Bing? Which by NRC?\n\nTask 9.2: Visualize Bing Results\n\nCreate bar plots to visualize positive and negative word counts per comment\nUse geom_bar() to show counts of positive and negative words\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(comment_sentiment_bing, aes(x = sentiment)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Histogram of Sentiment\", x = \"Sentiment\", y = \"Count\") +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), vjust = -0.5) +\n  theme_minimal()\n\n\n\nTask 9.3 compare Bing with AFINN\n\nCompare Bing and AFINN results\nCreate a comparison dataframe with both lexicons\nUse left_join() to merge AFINN and Bing results by comment ID\nIdentify comments where Bing and AFINN disagree\n\n\n\n\n\n\nCode\ncomparison_df2 &lt;- comments %&gt;% \n  left_join(comment_sentiment_bing %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_bing = sentiment) %&gt;%\n  left_join(comment_sentiment %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_afinn = sentiment)\n\ncomparison_df2\n\n# show the comments where Bing and AFINN disagree\n\ncomparison_df2 %&gt;%\n  filter(sentiment_bing != sentiment_afinn | is.na(sentiment_bing) != is.na(sentiment_afinn))\n\n\n\nTask 9.4: Visualize AFINN vs Bing\n\nCreate a bar plot comparing AFINN and Bing sentiments\nUse geom_bar() to show counts of each sentiment per comment\n\n\n\n\n\n\nCode\n# Reshape the data to long format for plotting\ncomparison_long &lt;- comparison_df2 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing),\n               names_to = \"lexicon\",\n               values_to = \"sentiment\") %&gt;%\n  mutate(lexicon = recode(lexicon, \n                          sentiment_afinn = \"AFINN\", \n                          sentiment_bing = \"Bing\"))\n\n# Create a grouped bar plot to compare sentiment distributions\nggplot(comparison_long, aes(x = sentiment, fill = lexicon)) +\n  geom_bar(position = \"dodge\", alpha = 0.5) +\n  geom_text(stat = \"count\", \n            aes(label = after_stat(count), group = lexicon),\n            position = position_dodge(width = 0.45), \n            vjust = -0.5) +\n  labs(title = \"Comparison of Sentiment Labels: AFINN vs Bing\",\n       x = \"Sentiment\",\n       y = \"Count\",\n       fill = \"Lexicon\") +\n  scale_fill_manual(values = c(\"AFINN\" = \"blue\", \"Bing\" = \"red\")) +\n  theme_minimal()\n\n\n\n\nBing\n\n\n\nCode\nggplot(comment_sentiment_bing, \n       aes(x = id, y = total_score, fill = total_score &gt; 0)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = total_score),\n    vjust = -0.3\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI using Bing lexicon\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"red\", \"blue\"), \n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 9.3: Visualize NRC Emotions\n\nTry visualizing NRC emotions (joy, anger, etc.) using a bar plot\n\nUse geom_bar() to show counts of each emotion per comment\nExample code:\n\n\n\n. . .\n\n\nCode\nwords_nrc_emotions &lt;- words_nrc %&gt;%\n    filter(!sentiment %in% c(\"positive\", \"negative\")) %&gt;%\n    group_by(id, sentiment) %&gt;%\n    summarise(word_count = n(), .groups = \"drop\")\n\nggplot(words_nrc_emotions, aes(x = sentiment, y = word_count, fill = sentiment)) +\n    geom_bar(stat = \"identity\") +\n    facet_wrap(~id, ncol = 6) +\n    labs(title = \"NRC Emotions per Comment\", x = \"Emotion\", y = \"Word Count\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\nTask 9.4: Discuss Lexicon Differences\n\nWhich lexicon (AFINN, Bing, NRC) seems best for your dataset?\n\nConsider factors like vocabulary coverage, sentiment granularity, and performance on your specific comments.\n\n\nTask 9.5: Discuss Nuance and Sarcasm\n\nDoes NRC capture more nuance?\n\nHow do results compare for sarcasm or mixed comments?\nDiscuss how NRC’s emotion-based approach might better capture complex sentiments like sarcasm or mixed emotions compared to AFINN or Bing\n\n\nTask 9.6: Discuss Lexicon Limitations\n\nDiscuss how lexicons like AFINN and Bing may struggle with sarcasm or mixed sentiments\n\ne.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN might score “great” positively, missing the sarcasm"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-10-sentiment-analysis-with-ollama",
    "href": "Workshop_Sentiment_Analysis_R.html#step-10-sentiment-analysis-with-ollama",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Sentiment Analysis with Ollama",
    "text": "Step 10: Sentiment Analysis with Ollama\n\nObjective: Use Ollama with Llama 3.2:3b to perform sentiment analysis\nOllama runs large language models (LLMs) like Llama 3.2:3b locally\n\noffering nuanced sentiment analysis by understanding context\n\n\n\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\nLoad Ollama\n\n\n\n\n\nCode\nlibrary(ollamar)\n\ntest_connection()\n\nlist_models()\n\n#pull(\"llama3.2:2b\")  # download a model (equivalent bash code: ollama run llama3.2:2b)\n\n\n\ntesting\n\n\n\n\n\nCode\n# generate a response/text based on a prompt; returns an httr2 response by default\nresp &lt;- generate(model=\"llama3.2:3b\", prompt=\"tell me a 50-word story\")\nresp\n\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-10-sentiment-analysis-with-ollama-continued",
    "href": "Workshop_Sentiment_Analysis_R.html#step-10-sentiment-analysis-with-ollama-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Sentiment Analysis with Ollama (continued)",
    "text": "Step 10: Sentiment Analysis with Ollama (continued)\n\nDefine the function to get sentiment using Ollama\n\n\n\n\nCode\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as Positive, Negative, or Neutral, and respond with only the label:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\n\n\nTask 10.1: Test the Function\n\nRun get_sentiment_ollama(\"AI is amazing and will make education so much better!\")\nWhat sentiment does it return?\n\nTask 10.2: Analyze All Comments\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncomments_ollama &lt;- comments %&gt;% mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-11-compare-with-lexicon-based-approach",
    "href": "Workshop_Sentiment_Analysis_R.html#step-11-compare-with-lexicon-based-approach",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Compare with lexicon-based approach",
    "text": "Step 11: Compare with lexicon-based approach\n\nCompare with lexicon to see differences\n\nespecially in complex comments (e.g. sarcasm, mixed emotions)\n\nAdd to comment_sentiment and categorize lexicon sentiments\n\n\n\n\nCode\ncomment_sentiment3 &lt;- comparison_df2 %&gt;% \n  left_join(comments_ollama %&gt;% select(id, sentiment_ollama), by = \"id\")\n\n\n\nTask 11.1: Visualize Sentiment Comparison\n\n\n\n\n\nCode\nlibrary(tidyr)\n\ncomparison3 &lt;- comment_sentiment3 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing, sentiment_ollama) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing, sentiment_ollama), \n               names_to = \"method\", \n               values_to = \"sentiment\")\n\ncomparison_counts3 &lt;- comparison3 %&gt;%\n  count(method, sentiment)\n\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Sentiment Distribution Comparison\", \n       x = \"Sentiment\", y = \"Count\") +\n  scale_fill_manual(name = \"Method\",\n                    values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"), \n                    labels = c(\"AFINN (Lexicon)\", \"Bing (Lexicon)\", \"llama3.2:3b (LLM)\")) +\n  scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3)) +\n  theme_minimal()\n\n\n\n\ngeom_text(aes(label = n), position = position_dodge(width = 0.45), hjust= 1., vjust = -0.5) +\n\nlibrary(ggplot2)\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) + geom_bar(stat = “identity”, position = “dodge”, color = “black”, linewidth = 0.2) + geom_text(aes(label = n), position = position_dodge(width = 0.45), vjust = -0.5, size = 3.5, fontface = “bold”) + labs(title = “Comparison of Sentiment Distribution Across Methods”, subtitle = “Counts of Sentiment Categories by Analysis Method”, x = “Sentiment Category”, y = “Number of Comments”, caption = “Data source: Sentiment analysis of comments using AFINN, Bing, and Ollama”) + scale_fill_manual(name = “Sentiment Analysis Method”, values = c(“#1b9e77”, “#d95f02”, “#7570b3”), labels = c(“Lexicon (AFINN)”, “Lexicon (Bing)”, “Ollama (LLM)”)) + scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3), expand = expansion(mult = c(0, 0.1))) + theme_minimal(base_size = 14) + theme( plot.title = element_text(face = “bold”, size = 16, hjust = 0.5), plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)), plot.caption = element_text(size = 10, hjust = 0, color = “grey50”), axis.title = element_text(face = “bold”), axis.text = element_text(color = “black”), legend.position = “top”, legend.title = element_text(face = “bold”, size = 12), legend.text = element_text(size = 10), panel.grid.major.x = element_blank(), panel.grid.minor = element_blank(), plot.margin = margin(10, 10, 10, 10) )"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#step-11-compare-with-lexicon-based-approach-continued",
    "href": "Workshop_Sentiment_Analysis_R.html#step-11-compare-with-lexicon-based-approach-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: compare with lexicon-based approach (continued)",
    "text": "Step 11: compare with lexicon-based approach (continued)\n\nTask 11.2: Identify Differing Comments\n\nFind comments where sentiment_lexicon != sentiment_ollama\n\n\n\n\n\nCode\ndiffering_comments &lt;- comment_sentiment3 %&gt;%\n  filter(sentiment_afinn != sentiment_ollama | sentiment_bing !=sentiment_ollama | sentiment_afinn != sentiment_ollama) %&gt;%\n  select(id, text, sentiment_afinn, sentiment_bing, sentiment_ollama)\n\nprint(differing_comments)\n\n\n\nTask 11.3: Examine Specific Comments\n\nRun comment_sentiment %&gt;% filter(id %in% c(7, 14, 26))\nWhy might the lexicon and LLM differ for these comments?\n\nDiscuss how LLMs capture context (e.g. sarcasm) better than lexicons\n\n\n\n\n\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm)\nID 14: “AI is overhyped, it’s not as smart as people think.” (mixed)\nID 26: “AI makes life easier, but it’s a bit scary too.” (mixed)\nDiscussion\n\nWhy do comments like ID 7 (sarcasm) differ?\n\nLexicon may score “great” positively\nbut Llama 3.2:3b detects sarcasm.\n\n\nComments with Significant Differences\n\nThe following comments are likely to show discrepancies between AFINN and Llama 3.2:3b, as highlighted in Task 9.3:\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN: Positive (due to “great” +3, “solve” +2), ignoring sarcastic “yeah, right.”\nLlama 3.2:3b: Negative, detecting sarcasm through context.\n\nWhy Different: Lexicons score words individually, missing tone; LLMs analyze full sentences.\n\n\nID 14: “AI is overhyped, it’s not as smart as people think.”\n\nAFINN: Neutral or negative (e.g., “overhyped” -2, “smart” +2 may cancel out).\nLlama 3.2:3b: Negative, recognizing critical intent.\nWhy Different: AFINN averages word scores; Llama 3.2:3b captures overall sentiment.\n\nID 26: “AI makes life easier, but it’s a bit scary too.”\n\nAFINN: Neutral (e.g., “easier” +2, “scary” -2 balance out).\nLlama 3.2:3b: Negative or mixed, emphasizing “scary” in context.\n\nWhy Different: Lexicons struggle with mixed emotions; LLMs weigh context.\n\nThese differences spark discussion in Step 9 about lexicon limitations (e.g., missing sarcasm) and LLM strengths (e.g., contextual understanding\nHow do LLMs improve on lexicons for complex sentiments?\n\nWhat are the trade-offs (e.g., LLM complexity vs. lexicon simplicity)?\n\nNote for Facilitators: Ensure Ollama is installed and Llama 3.2:3b is pulled (ollama pull llama3.2:3b)\n\nThis step may take longer due to LLM processing\n\nconsider pre-computing results or running on a subset if time is limited\n\nRun comment_sentiment %&gt;% filter(id == 14). Why might the lexicon and LLM differ\n\nTry the NRC lexicon: Replace afinn with get_sentiments(“nrc”) in Step 6\n\n(adjust for emotion categories) and rerun Steps 6–8\nCompare with Ollama\nHighlight how LLMs capture context (e.g., sarcasm in ID 7) better than lexicons"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#more-discussion",
    "href": "Workshop_Sentiment_Analysis_R.html#more-discussion",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "More Discussion",
    "text": "More Discussion\n\nDoes score match the text’s tone?\nHow does sentiment analysis help understand AI’s societal impact?\nCompanies: Improve AI based on feedback\n\ne.g. if many comments are negative about AI in jobs, they can address concerns\n\nGovernments\n\nAddress fears about AI privacy or jobs\n\nSociety: Highlight excitement for AI in education or healthcare\nWrap-up Questions:\n\nWhat surprised you about the comments?\nHow might sentiment analysis help shape AI’s future in society?\nWhat are the limits of sentiment analysis?\n\n\n\n\ne.g. it might miss sarcasm or cultural nuances"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#takeaway",
    "href": "Workshop_Sentiment_Analysis_R.html#takeaway",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Takeaway",
    "text": "Takeaway\n\nSentiment analysis is an AI tool to understand emotions in text\nYou’ve learned R to\n\nload data\ntokenize\nscore and classify sentiments\nvisualize sentiments"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#resources",
    "href": "Workshop_Sentiment_Analysis_R.html#resources",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science\nTidytext Book\nKaggle - Search “Twitter sentiment” for practice datasets\n\n\n\nFacilitator Notes\n\nPreparation\n\nEnsure R and RStudio are installed. Pre-install packages (tidyverse, tidytext, textdata) to save time\n\nDataset\n\nSmall, fictional dataset keeps it simple. For advanced students, consider a real dataset (e.g., tweets) in a follow-up\n\n\nPacing\n\nEach step is 10–12 minutes, with 24 minutes for Step 8. Skip one practice task per step if running over\nTotal: ~95 minutes hands-on + ~15 minutes discussion = ~110 minutes\n\n\nEngagement\n\nEncourage sharing in discussions to connect to real-world AI issues\n\nTroubleshooting: Assist with RStudio (console vs. script) and package errors"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R.html#assignment-real-world-sentiment-analysis-practice",
    "href": "Workshop_Sentiment_Analysis_R.html#assignment-real-world-sentiment-analysis-practice",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Assignment: Real-World Sentiment Analysis Practice",
    "text": "Assignment: Real-World Sentiment Analysis Practice\nAnalyze Social Media Data with Lexicon and LLM Methods\n\nObjective: Practice everything learned using a real-world dataset\nStep 1: Download and Load Data\n\n\n\n\nCode\nlibrary(tidyverse)\n\nreal_comments &lt;- read_csv(\"https://raw.githubusercontent.com/laxmimerit/All-CSV-ML-Data-Files-Download/refs/heads/master/twitter_sentiment.csv\", col_names = c(\"id\",\"entity\", \"sentiment\", \"text\"))\n\nhead(real_comments)\n\n\n\nStep 2: Tokenize and Clean Data\n\n\n\n\n\nCode\nlibrary(tidytext)\nreal_words &lt;- real_comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nStep 3: Compare Lexicons among AFINN, Bing and NRC\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\nbing &lt;- get_sentiments(\"bing\")\nnrc &lt;- get_sentiments(\"nrc\")\n\n# Join and score with AFINN\nreal_sentiment_afinn &lt;- real_words %&gt;%\n  inner_join(afinn, by = \"word\") %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value, na.rm = TRUE))\n\n# Join and score with Bing\nreal_sentiment_bing &lt;- real_words %&gt;%\n  inner_join(bing, by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n# Join and score with NRC (positive/negative)\nreal_sentiment_nrc &lt;- real_words %&gt;%\n  inner_join(nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\")), by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n\n\nStep 4: Visualize Results\n\n\n\n\n\nCode\n# AFINN\nlibrary(ggplot2)\n\nggplot(real_sentiment_afinn, aes(x = id, y = total_score)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"AFINN Sentiment Scores\", x = \"Comment ID\", y = \"Score\") +\n  theme_minimal()\n\n# Bing\nggplot(real_sentiment_bing, aes(x = id)) +\n  geom_bar(aes(y = positive), stat = \"identity\", fill = \"blue\", alpha = 0.5) +\n  geom_bar(aes(y = -negative), stat = \"identity\", fill = \"red\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Positive vs Negative\", x = \"Comment ID\", y = \"Word Count\") +\n  theme_minimal()\n\n\n\nStep 5: (Optional) Use Ollama/LLM for Sentiment\n\n\n\n\n\nCode\n# If you have Ollama and Llama3 installed:\nlibrary(ollamar)\n\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as positive, negative, or neutral, and respond with only the label in lower case:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\nreal_comments &lt;- real_comments %&gt;%\n  mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))\n\n\n\n\n\nStep 6: Compare and Discuss\nCompare lexicon and LLM results\nWhich method best handles sarcasm, mixed emotions, or context?\nWrite a short paragraph (3–5 sentences) on your findings\n\n\n\nDeliverables:\n\nR script with code for all steps\n\nPlots comparing sentiment by method\n\nShort discussion of your results\n\nBonus:\n\nTry analyzing sentiment on comments about another societal topic (e.g. climate change, education, public health)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#overview",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#overview",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Overview",
    "text": "Overview\n\nThis 2-hour workshop introduces high school students to sentiment analysis using R in RStudio\nwe will analyze social media comments about AI’s societal impact\n\nlearning basic R commands\nexploring how sentiment analysis reveals public opinions\n\nRoadmap\n\nbackground on sentiment analysis\nhands-on tasks\ndiscussions linking AI to society\n\nLearning Goals:\n\nUnderstand sentiment analysis and how AI can enhance it\nLearn basic R commands for text analysis\nAnalyze sentiments in comments about AI’s societal impact\nDiscuss how sentiment analysis informs AI’s role in society\n\n\n\nPrerequisites: No R experience needed. Students need R and RStudio installed.\nMaterials: Laptops with R and RStudio, a simple dataset (provided in code)."
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#background-sentiment-analysis-and-ai-in-society",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#background-sentiment-analysis-and-ai-in-society",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nWhat is Sentiment Analysis?\n\nSentiment analysis is an AI technique that identifies emotions in text\n\ncommonly label them\n\npositive\n\ne.g. I love this!\n\nnegative\n\ne.g. This is scary\n\nneutral\n\ne.g. It’s fine\n\n\n\n\nit is used to understand public opinions/public attitudes\n\ne.g. how people feel about AI in education, jobs, or healthcare"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#background-sentiment-analysis-and-ai-in-society-1",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#background-sentiment-analysis-and-ai-in-society-1",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nHow it Works:\n\nLexicon-based\n\nUses a dictionary to assign labels/scores to words\n\ne.g., awesome \\(\\rightarrow\\) positive; worried \\(\\rightarrow\\) negative\n\nWe mainly focus on this approach today for simplicity\n\nMachine Learning-based\n\nTrains machine learning models on labeled data to predict sentiment\n\ne.g., “I love AI!” → positive, “AI is scary” → negative\n\nMore complex but powerful\n\nAdvanced AI\n\nLLM models (like ChatGPT, Deepseek)\nit analyze context for higher accuracy, but they are complex"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#background-sentiment-analysis-and-ai-in-society-2",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#background-sentiment-analysis-and-ai-in-society-2",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nConnection to AI and Society:\n\nSentiment analysis reveals public attitudes toward AI and products, helping understand its societal impact.\n\nExamples:\n\nCompanies analyze tweets to improve their products\nGovernments study comments to address concerns about the satisfaction of its public services\n\nResearchers explore how AI in healthcare is perceived\n\ne.g. trust in AI diagnostics\n\n\n\nBy analyzing text, we learn what excites or worries people, driving further development to benefit society\n\n\n\nAI is transforming society—powering education tools, automating jobs, and aiding doctors\nUnderstanding public sentiment ensures AI is developed responsibly, addressing fears (e.g., privacy) and amplifying benefits\n\ne.g., better learning"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-1-introduction-and-setup",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-1-introduction-and-setup",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 1: Introduction and Setup",
    "text": "Step 1: Introduction and Setup\n\nObjective: set up RStudio\nTask 1.1: Open RStudio\n\nOpen RStudio\n\nCreate a new R script: File &gt; New File &gt; R Script\n\nSave as sentiment_workshop.R if needed\n\n\nTask 1.2: Install Packages\n\nRun in the console\n\n\n\n\n\nCode\n# Install necessary packages for sentiment analysis\ninstall.packages(c(\"tidyverse\", \"tidytext\", \"textdata\"))\n\n\n\nnote: tidyverse for data tasks; tidytext for text analysis; textdata for sentiment dictionaries\n\n\n\nStep 1 - 10 minutes\nEnsure textdata package is installed, as it provides AFINN, Bing, and NRC lexicons\nContent:\n\nExplain sentiment analysis: “It’s like teaching a computer to read emotions in text, like excitement or fear about AI.”\nLink to AI and Society: “We’ll analyze comments about AI to see how people feel about its impact on jobs or schools.”\n\nRStudio basics: Console (for commands), script editor (for saving code)\n\nPractice (3 minutes):\nType print(“Hello, I’m learning R!”) in the console and press Enter. What happens?\n\nGuess: What sentiment score might “excited” have in a dictionary? “Sad”?\n\nDiscussion (2 minutes):\n\nWhy study sentiments about AI?\n\nExample: How could knowing if people love or fear AI in schools help teachers?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-2-loading-tools-and-data",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-2-loading-tools-and-data",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 2: Loading Tools and Data",
    "text": "Step 2: Loading Tools and Data\n\nObjective: Load R packages and a dataset of comments\nDataset\n\nFictional social media comments about AI’s societal impact\n\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(textdata)\n\ncomments &lt;- tibble(\n  id = 1:30,\n  text = c(\n    \"AI is amazing and will make education so much better!\",\n    \"I’m worried AI will take over jobs and leave people unemployed.\",\n    \"AI helps doctors save lives, it’s a game-changer.\",\n    \"I don’t trust AI, it feels creepy and invasive.\",\n    \"AI is okay, but it needs regulation to be safe.\",\n    \"AI in schools is cool, but it’s not perfect.\",\n    \"Wow, AI is so great, it’ll solve all our problems… yeah, right!\",  # Sarcasm\n    \"AI makes healthcare faster and more accurate, love it!\",\n    \"Why does AI know so much about me? It’s unsettling.\",\n    \"AI chatbots are fun to talk to, but sometimes useless.\",\n    \"AI in movies is awesome, makes everything so realistic!\",\n    \"I’m scared AI will control everything one day.\",\n    \"AI helps me study better, it’s like a personal tutor.\",\n    \"AI is overhyped, it’s not as smart as people think.\",  # Mixed\n    \"Using AI for art is creative and inspiring!\",\n    \"AI in cars? No way, I don’t trust self-driving tech.\",\n    \"AI makes my phone so smart, it’s incredible!\",\n    \"I feel like AI is watching me all the time, creepy.\",\n    \"AI in gaming makes battles so epic, I’m hooked!\",\n    \"AI might replace teachers, and that’s not cool.\",\n    \"AI saves time at work, but I miss human interaction.\",\n    \"AI’s fine, but it makes mistakes sometimes.\",  # Neutral\n    \"AI in music creation is a total game-changer!\",\n    \"I’m skeptical about AI making fair decisions.\",\n    \"AI is great, but only if it’s used ethically.\",  # Mixed\n    \"AI makes life easier, but it’s a bit scary too.\",  # Mixed\n    \"AI in agriculture boosts crops, amazing stuff!\",\n    \"I don’t get why everyone loves AI so much.\",  # Negative\n    \"AI tutors are helpful, but they don’t replace real teachers.\",\n    \"AI sounds cool, but I’m not sure it’s safe.\"  # Mixed\n  )\n)\n\n\n\nTask 2.1: Run the Code\n\nRun the code (highlight and press Ctrl+Enter)\n\nTask 2.2: View the Data\n\nprint(comments)\n\nTask 2.3: View comments\n\nRun view(comments) in the console\n\nHow many comments are there?\n\n\n\n\n\n10 minutes\nContent:\n\nIntroduce dataset: “We’ll analyze comments about AI’s impact on society, like education and jobs”\n\nThe dataset now includes 30 varied comments, covering:\n\nPositive: e.g., “AI makes healthcare faster and more accurate, love it!”\nNegative: e.g., “I’m scared AI will control everything one day.”\nNeutral: e.g., “AI’s fine, but it makes mistakes sometimes.”\nComplex: e.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm), “AI is great, but only if it’s used ethically” (mixed emotions).\nComplex comments challenge lexicon-based approaches\n\nsarcasm (e.g. comment 7)\nmixed sentiments (e.g. comments 14, 25, 26, 30)\n\nAFINN may misinterpret due to its word-based scoring\n\n\n\nComments like “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm) may score positively due to words like “great” but are negative in context\nMixed comments (e.g., “AI makes life easier, but it’s a bit scary too”) combine positive and negative words, potentially leading to misleading scores\nRun colnames(comments) and nrow(comments)\nWrite down: Which comment seems happiest about AI? Most negative?\n\nExample: “AI is amazing” vs. “AI feels creepy”\n\nDiscussion (2 minutes):\n\nHow might these comments reflect real opinions about AI?\n\nExample: What might someone post about AI in movies or games?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-3-exploring-the-dataset",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-3-exploring-the-dataset",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 3: Exploring the Dataset",
    "text": "Step 3: Exploring the Dataset\n\nObjective: Understand the dataset’s structure\n\n\n\n\nCode\ncolnames(comments)\nnrow(comments)\n\ncomments$text[1]\n\n\n\nTask 3.1: View Specific Comments\n\nRun ncol(comments) to check how many columns are in the dataset\n\nTask 3.2: View Specific Comments\n\nRun comments$text[4] to see the fourth comment\n\n\n\n\n5 min\nContent:\n\nDataset has id (comment number) and text (comment content)\nExploring data helps us know what we’re analyzing\n\nTask: View a Specific Comment\n\nRun comments$text[3]\n\nWhat does comment 3 say?\n\n\nPractice (3 minutes):\n\nRun comments$text[4]. What does it say?\n\nRun ncol(comments). How many columns in the dataset?\n\nWrite down: What does id tell us about each comment?\n\nDiscussion (2 minutes):\n\nWhy explore data before analyzing it?\n\nHow can comments about AI help us understand its societal role?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-4-splitting-text-into-words",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-4-splitting-text-into-words",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 4: Splitting Text into Words",
    "text": "Step 4: Splitting Text into Words\n\nObjective: Learn tokenization to break text into words\nTokenization splits sentences into words\n\ne.g. “AI is cool” \\(\\rightarrow\\) {“AI,” “is,” “cool”}\nWords are the building blocks for (most) sentiment analysis\n\n\n\n\n\nCode\nwords &lt;- comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nTask 4.1: View Words\n\nprint(words)\n\nTask 4.2: How many words are there?\n\nRun nrow(words)\n\nTask 4.3: View First 5 Words\n\nRun head(words, 5)\n\nTask 4.4: How many unique words are there?\n\nRun n_distinct(words$word)\n\nTask 4.5: View Most Common Words\n\nRun words %&gt;% count(word, sort = TRUE) %&gt;% head(10)\n\nTask 4.6: How many times does “better” appear?\n\nRun words %&gt;% filter(word == \"better\")\n\n\n\n\n12 minutes\nGuess: Which words might show strong emotions?\n\nDiscussion\n\nWhy split text into words?\n\nHow might words like “amazing” or “creepy” reflect feelings about AI?\n\n\nwords %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-5-exploring-sentiment-lexicons",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-5-exploring-sentiment-lexicons",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons",
    "text": "Step 5: Exploring Sentiment Lexicons\n\nObjective: Understand how lexicons assign sentiment scores\nA lexicon is a dictionary scoring words’ emotions\n\nAFINN: -5 to +5\n\ne.g. “Happy” = +3, “scary” = -2\n\nAlternatives\n\nBing:\n\na binary classification: positive/negative\n\nNRC:\n\nemotion-based (e.g. joy, anger) and positive/negative classifications\n\n\n\nHere, AI uses lexicons to quantify feelings in text\n\n\n\n12 minutes"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-5-exploring-sentiment-lexicons-continued",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-5-exploring-sentiment-lexicons-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons (continued)",
    "text": "Step 5: Exploring Sentiment Lexicons (continued)\n\nWe will use the AFINN lexicon, which assigns scores to words based on their sentiment\n\nPositive words have positive scores, negative words have negative scores\nNeutral words have a score of 0\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\n\n\n\nTask 5.1: View Lexicon\n\nRun: head(afinn, 10)\n\nTask 5.2: Check Scores for Specific Words\n\nRun: afinn %&gt;% filter(word == \"trust\")\nWhat’s its score?\n\nRun: afinn %&gt;% filter(word == \"bad\")\nGuess the score for “awesome”\nList two words you think are negative\n\n\n\n\nCheck with afinn %&gt;% filter(word == \"awesome\")\nCheck their scores with afinn %&gt;% filter(word %in% c(\"word1\", \"word2\"))\nDiscussion (2 minutes):\n\nHow does a lexicon help AI understand text?\n\nWhy might it miss complex emotions (e.g., “AI is cool but scary”)?\n\nget_sentiments(“bing”) or get_sentiments(“nrc”)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-6-scoring-words-for-sentiment",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-6-scoring-words-for-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 6: Scoring Words for Sentiment",
    "text": "Step 6: Scoring Words for Sentiment\n\nObjective: Assign sentiment scores to words\nMatch dataset words to AFINN lexicon scores\n\nOnly words in the lexicon get scores\n\n\n\n\n\nCode\nsentiment_scores &lt;- words %&gt;%\n  inner_join(afinn, by = \"word\")\n\n\n\nTask 6.1: View Scores\n\nRun: print(sentiment_scores)\nList one positive and one negative word\n\nTask 6.2: Count Negative Words\n\nRun: sentiment_scores %&gt;% filter(value &lt; 0)\n\nTask 6.3: Count Positive Words\n\nRun: sentiment_scores %&gt;% filter(value &gt; 0)\n\n\n\n\nGuess: Why might some words (e.g., “AI”) not appear?\nDiscussion (2 minutes):\nHow do scores show opinions about AI?\n\nExample: How might negative scores about AI jobs affect workers?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-7-summarizing-comment-sentiment",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-7-summarizing-comment-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 7: Summarizing Comment Sentiment",
    "text": "Step 7: Summarizing Comment Sentiment\n\nObjective: Calculate total sentiment for each comment\nSum word scores per comment to get its overall sentiment\n\nPositive total = Sum of positive comments (scores)\nNegative total = Sun of negative comments (scores)\nsentiment = positive total - negative total\n\n\n\n\n\nCode\ncomment_sentiment &lt;- sentiment_scores %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value)) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  arrange(id)\n\n\n\nTask 7.1: View Results\n\nRun print(comment_sentiment)\nWhich comment has the lowest score?\n\nTask 7.2: Sort by Total Score\n\nRun comment_sentiment %&gt;% arrange(desc(total_score))\nWhich is most positive?\n\nTask 7.3: Check Comment 18’s Score\n\nRead comment 18’s text and score\nDo they match?\n\nTask 7.4: Check Neutral Comments\n\nRun comment_sentiment %&gt;% filter(total_score == 0)\nAny neutral comments?\n\nTask 7.5: Add Sentiment Labels\n\nRun the following code\n\n\n\n\n\n\nCode\ncomment_sentiment &lt;- comment_sentiment %&gt;% \n  mutate(sentiment = case_when(is.na(total_score) ~ NA_character_,\n                               total_score &gt; 0 ~ \"Positive\", \n                               total_score &lt; 0 ~ \"Negative\",\n                               TRUE ~ \"Neutral\"))\n\n\n\n\nStep 7 - 15 minutes\nDiscussion (2 minutes):\n\nWhat do scores tell us about views on AI?\n\nExample: How might positive scores about AI in healthcare help doctors?\n\nTask 7.5: Add a New Comment\n\nAdd a new comment comments &lt;- comments %&gt;% add_row(id = 31, text = \"AI makes learning fun but can be confusing.\")\n\nWhat’s the new comment’s score?\n\nRun comment_sentiment %&gt;% filter(total_score &gt; 0) - How many positive comments?\n\n\ntable(comment_sentiment$sentiment, useNA=“ifany”)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-8-visualizing-and-discussing-results",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-8-visualizing-and-discussing-results",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 8: Visualizing and Discussing Results",
    "text": "Step 8: Visualizing and Discussing Results\n\nObjective: Visualize sentiment and discuss AI’s societal impact\nCreate a bar plot to see positive/negative sentiments\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = id, y = total_score, fill = sentiment)) +\n  geom_bar(stat = \"identity\", na.rm = TRUE) +\n  geom_text(\n    data = filter(comment_sentiment, !is.na(total_score)),\n    aes(\n      label = total_score,\n      vjust = case_when(\n        total_score &gt;= 0 ~ -0.3,\n        total_score &lt; 0  ~ 1.3\n      )\n    )\n  ) +\n  geom_text(\n    data = filter(comment_sentiment, is.na(total_score)),\n    aes(y = 0, label = \"NA\"),\n    vjust = -0.3,\n    color = \"black\",\n    size = 2\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI usign AFINN\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"Negative\" = \"red\", \"Positive\" = \"blue\"),\n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE # don't show NA in the legend\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 8.1: Create Plot\n\nRun the plot code\n\nIdentify: Which comments are blue (positive)? Red (negative)?\n\nTask 8.2: Plot the density of sentiment distribution\n\nCreate a density plot of sentiment scores\nUse geom_density() to visualize the distribution\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = total_score, fill = sentiment)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Density Plot of Comment Sentiment Scores\",\n       x = \"Sentiment Score\", y = \"Density\") +\n  theme_minimal()\n\n\n\nTask 8.3: Plot the histogram of sentiment label\n\nCreate a histogram of sentiment labels\nUse geom_bar() to visualize counts of each sentiment label\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = sentiment, fill = sentiment)) +\n  geom_bar() +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -0.5\n  ) +\n  labs(title = \"Histogram of Sentiment Labels\",\n       x = \"Sentiment\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\nStep 8 - 24 minutes\nPractice (6 minutes)\n\nRun comment_sentiment %&gt;% filter(id == 7). Why might the sarcastic comment’s score be misleading?\nTry the Bing lexicon: Replace afinn with get_sentiments(“bing”) in Step 6 and rerun Steps 6–8\n\nCompare results"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-9-exploring-other-lexicon",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-9-exploring-other-lexicon",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon",
    "text": "Step 9: Exploring other Lexicon\nObjective: Explore Bing and NRC sentiment lexicons as alternatives to AFINN\n\nWhat are Bing and NRC? (recap)\n\nBing Lexicon:\n\nClassifies words as “positive” or “negative” only (no score)\n\nNRC Lexicon:\n\nAssigns words to emotions (joy, anger, fear, etc.) and positive/negative\n\n\nTasks: Load Bing and NRC Lexicons\n\n\n\n\nCode\nlibrary(tidytext)\n\nbing &lt;- get_sentiments(\"bing\")\n\nnrc &lt;- get_sentiments(\"nrc\")\n\n\n\nTask: View Lexicon Examples\n\n\n\n\n\nCode\nhead(bing, 10)\n\nhead(nrc, 10)\n\n\n\nTask: Join Words with Bing\n\n\n\n\n\nCode\nwords_bing &lt;- words %&gt;%\n  inner_join(bing, by = \"word\")\n\nwords_nrc &lt;- words %&gt;%\n  inner_join(nrc, by = \"word\")\n\n\n\n\nsome words show up more than 1 time\n\nword_counts &lt;- bing %&gt;% group_by(word) %&gt;% summarise(count = n()) %&gt;% filter(count &gt; 1)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-9-exploring-other-lexicon-continued",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-9-exploring-other-lexicon-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon (continued)",
    "text": "Step 9: Exploring other Lexicon (continued)\n\nSummarize Sentiment by Comment (Bing)\n\n\n\n\nCode\ncomment_sentiment_bing &lt;- words_bing %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n      is.na(total_score) ~ NA_character_,\n      total_score &gt; 0 ~ \"Positive\",\n      total_score &lt; 0 ~ \"Negative\",\n      TRUE ~ \"Neutral\"\n    )) %&gt;% arrange(id)\n\n\n\n\n\nSummarize Sentiment by Comment (NRC)\n\n\n\n\n\nCode\nwords_nrc_pn &lt;- words_nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\"))\n\ncomment_sentiment_nrc &lt;- words_nrc_pn %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;%\n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n    is.na(total_score) ~ NA_character_,\n    total_score &gt; 0 ~ \"Positive\",\n    total_score &lt; 0 ~ \"Negative\",\n    TRUE ~ \"Neutral\"\n  )) %&gt;% arrange(id)\n\n\n\nTask 9.1: Compare Positive and Negative Comments\n\nRun comment_sentiment_bing %&gt;% filter(total_score &gt; 0)\n\nRun comment_sentiment_nrc %&gt;% filter(total_score &gt; 0)\n\nWhich comments are positive by Bing? Which by NRC?\n\nTask 9.2: Visualize Bing Results\n\nCreate bar plots to visualize positive and negative word counts per comment\nUse geom_bar() to show counts of positive and negative words\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(comment_sentiment_bing, aes(x = sentiment)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Histogram of Sentiment\", x = \"Sentiment\", y = \"Count\") +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), vjust = -0.5) +\n  theme_minimal()"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-10-comparing-afinn-and-bing",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-10-comparing-afinn-and-bing",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Comparing AFINN and Bing",
    "text": "Step 10: Comparing AFINN and Bing\n\nTask 10.1 Comparing Bing with AFINN\n\nCompare Bing and AFINN results\nCreate a comparison dataframe with both lexicons\nUse left_join() to merge AFINN and Bing results by comment ID\nIdentify comments where Bing and AFINN disagree\n\n\n\n\n\nCode\ncomparison_df2 &lt;- comments %&gt;% \n  left_join(comment_sentiment_bing %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_bing = sentiment) %&gt;%\n  left_join(comment_sentiment %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_afinn = sentiment)\n\ncomparison_df2\n\n# show the comments where Bing and AFINN disagree\n\ncomparison_df2 %&gt;%\n  filter(sentiment_bing != sentiment_afinn | is.na(sentiment_bing) != is.na(sentiment_afinn))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-11-sentiment-analysis-with-ollama",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-11-sentiment-analysis-with-ollama",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Sentiment Analysis with Ollama",
    "text": "Step 11: Sentiment Analysis with Ollama\n\nObjective: Use Ollama with Llama 3.2:3b to perform sentiment analysis\nOllama runs large language models (LLMs) like Llama 3.2:3b locally\n\noffering nuanced sentiment analysis by understanding context\n\n\n\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\nLoad Ollama\n\n\n\n\n\nCode\nlibrary(ollamar)\n\ntest_connection()\n\nlist_models()\n\n#pull(\"llama3.2:2b\")  # download a model (equivalent bash code: ollama run llama3.2:2b)\n\n\n\ntesting\n\n\n\n\n\nCode\n# generate a response/text based on a prompt; returns an httr2 response by default\nresp &lt;- generate(model=\"llama3.2:3b\", prompt=\"tell me a 50-word story\")\nresp\n\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-11-sentiment-analysis-with-ollama-continued",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-11-sentiment-analysis-with-ollama-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Sentiment Analysis with Ollama (continued)",
    "text": "Step 11: Sentiment Analysis with Ollama (continued)\n\nDefine the function to get sentiment using Ollama\n\n\n\n\nCode\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as Positive, Negative, or Neutral, and respond with only the label:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\n\n\nTask 11.1: Test the Function\n\nRun get_sentiment_ollama(\"AI is amazing and will make education so much better!\")\nWhat sentiment does it return?\n\nTask 11.2: Analyze All Comments\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncomments_ollama &lt;- comments %&gt;% mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-12-compare-with-lexicon-based-approach",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-12-compare-with-lexicon-based-approach",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 12: Compare with lexicon-based approach",
    "text": "Step 12: Compare with lexicon-based approach\n\nCompare with lexicon to see differences\n\nespecially in complex comments (e.g. sarcasm, mixed emotions)\n\nAdd to comment_sentiment and categorize lexicon sentiments\n\n\n\n\nCode\ncomment_sentiment3 &lt;- comparison_df2 %&gt;% \n  left_join(comments_ollama %&gt;% select(id, sentiment_ollama), by = \"id\")\n\n\n\nTask 12.1: Visualize Sentiment Comparison\n\n\n\n\n\nCode\nlibrary(tidyr)\n\ncomparison3 &lt;- comment_sentiment3 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing, sentiment_ollama) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing, sentiment_ollama), \n               names_to = \"method\", \n               values_to = \"sentiment\")\n\ncomparison_counts3 &lt;- comparison3 %&gt;%\n  count(method, sentiment)\n\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Sentiment Distribution Comparison\", \n       x = \"Sentiment\", y = \"Count\") +\n  scale_fill_manual(name = \"Method\",\n                    values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"), \n                    labels = c(\"AFINN (Lexicon)\", \"Bing (Lexicon)\", \"llama3.2:3b (LLM)\")) +\n  scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3)) +\n  theme_minimal()\n\n\n\n\ngeom_text(aes(label = n), position = position_dodge(width = 0.45), hjust= 1., vjust = -0.5) +\n\nlibrary(ggplot2)\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) + geom_bar(stat = “identity”, position = “dodge”, color = “black”, linewidth = 0.2) + geom_text(aes(label = n), position = position_dodge(width = 0.45), vjust = -0.5, size = 3.5, fontface = “bold”) + labs(title = “Comparison of Sentiment Distribution Across Methods”, subtitle = “Counts of Sentiment Categories by Analysis Method”, x = “Sentiment Category”, y = “Number of Comments”, caption = “Data source: Sentiment analysis of comments using AFINN, Bing, and Ollama”) + scale_fill_manual(name = “Sentiment Analysis Method”, values = c(“#1b9e77”, “#d95f02”, “#7570b3”), labels = c(“Lexicon (AFINN)”, “Lexicon (Bing)”, “Ollama (LLM)”)) + scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3), expand = expansion(mult = c(0, 0.1))) + theme_minimal(base_size = 14) + theme( plot.title = element_text(face = “bold”, size = 16, hjust = 0.5), plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)), plot.caption = element_text(size = 10, hjust = 0, color = “grey50”), axis.title = element_text(face = “bold”), axis.text = element_text(color = “black”), legend.position = “top”, legend.title = element_text(face = “bold”, size = 12), legend.text = element_text(size = 10), panel.grid.major.x = element_blank(), panel.grid.minor = element_blank(), plot.margin = margin(10, 10, 10, 10) )"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-12-compare-with-lexicon-based-approach-continued",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-12-compare-with-lexicon-based-approach-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 12: compare with lexicon-based approach (continued)",
    "text": "Step 12: compare with lexicon-based approach (continued)\n\nTask 12.2: Identify Differing Comments\n\nFind comments where sentiment_lexicon != sentiment_ollama\n\n\n\n\n\nCode\ndiffering_comments &lt;- comment_sentiment3 %&gt;%\n  filter(sentiment_afinn != sentiment_ollama | sentiment_bing !=sentiment_ollama | sentiment_afinn != sentiment_ollama) %&gt;%\n  select(id, text, sentiment_afinn, sentiment_bing, sentiment_ollama)\n\nprint(differing_comments)\n\n\n\nTask 12.3: Examine Specific Comments\n\nRun comment_sentiment %&gt;% filter(id %in% c(7, 14, 26))\nWhy might the lexicon and LLM differ for these comments?\n\nDiscuss how LLMs capture context (e.g. sarcasm) better than lexicons\n\n\n\n\n\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm)\nID 14: “AI is overhyped, it’s not as smart as people think.” (mixed)\nID 26: “AI makes life easier, but it’s a bit scary too.” (mixed)\nDiscussion\n\nWhy do comments like ID 7 (sarcasm) differ?\n\nLexicon may score “great” positively\nbut Llama 3.2:3b detects sarcasm.\n\n\nComments with Significant Differences\n\nThe following comments are likely to show discrepancies between AFINN and Llama 3.2:3b, as highlighted in Task 9.3:\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN: Positive (due to “great” +3, “solve” +2), ignoring sarcastic “yeah, right.”\nLlama 3.2:3b: Negative, detecting sarcasm through context.\n\nWhy Different: Lexicons score words individually, missing tone; LLMs analyze full sentences.\n\n\nID 14: “AI is overhyped, it’s not as smart as people think.”\n\nAFINN: Neutral or negative (e.g., “overhyped” -2, “smart” +2 may cancel out).\nLlama 3.2:3b: Negative, recognizing critical intent.\nWhy Different: AFINN averages word scores; Llama 3.2:3b captures overall sentiment.\n\nID 26: “AI makes life easier, but it’s a bit scary too.”\n\nAFINN: Neutral (e.g., “easier” +2, “scary” -2 balance out).\nLlama 3.2:3b: Negative or mixed, emphasizing “scary” in context.\n\nWhy Different: Lexicons struggle with mixed emotions; LLMs weigh context.\n\nThese differences spark discussion in Step 9 about lexicon limitations (e.g., missing sarcasm) and LLM strengths (e.g., contextual understanding\nHow do LLMs improve on lexicons for complex sentiments?\n\nWhat are the trade-offs (e.g., LLM complexity vs. lexicon simplicity)?\n\nNote for Facilitators: Ensure Ollama is installed and Llama 3.2:3b is pulled (ollama pull llama3.2:3b)\n\nThis step may take longer due to LLM processing\n\nconsider pre-computing results or running on a subset if time is limited\n\nRun comment_sentiment %&gt;% filter(id == 14). Why might the lexicon and LLM differ\n\nTry the NRC lexicon: Replace afinn with get_sentiments(“nrc”) in Step 6\n\n(adjust for emotion categories) and rerun Steps 6–8\nCompare with Ollama\nHighlight how LLMs capture context (e.g., sarcasm in ID 7) better than lexicons"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#more-discussion",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#more-discussion",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "More Discussion",
    "text": "More Discussion\n\nDoes score match the text’s tone?\nHow does sentiment analysis help understand AI’s societal impact?\nCompanies: Improve AI based on feedback\n\ne.g. if many comments are negative about AI in jobs, they can address concerns\n\nGovernments\n\nAddress fears about AI privacy or jobs\n\nSociety: Highlight excitement for AI in education or healthcare\nWrap-up Questions:\n\nWhat surprised you about the comments?\nHow might sentiment analysis help shape AI’s future in society?\nWhat are the limits of sentiment analysis?\n\n\n\n\ne.g. it might miss sarcasm or cultural nuances"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#takeaway",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#takeaway",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Takeaway",
    "text": "Takeaway\n\nSentiment analysis is an AI tool to understand emotions in text\nYou’ve learned R to\n\nload data\ntokenize\nscore and classify sentiments\nvisualize sentiments"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#resources",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#resources",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science\nTidytext Book\nKaggle - Search “Twitter sentiment” for practice datasets\n\n\n\nFacilitator Notes\n\nPreparation\n\nEnsure R and RStudio are installed. Pre-install packages (tidyverse, tidytext, textdata) to save time\n\nDataset\n\nSmall, fictional dataset keeps it simple. For advanced students, consider a real dataset (e.g., tweets) in a follow-up\n\n\nPacing\n\nEach step is 10–12 minutes, with 24 minutes for Step 8. Skip one practice task per step if running over\nTotal: ~95 minutes hands-on + ~15 minutes discussion = ~110 minutes\n\n\nEngagement\n\nEncourage sharing in discussions to connect to real-world AI issues\n\nTroubleshooting: Assist with RStudio (console vs. script) and package errors"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#assignment-real-world-sentiment-analysis-practice",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#assignment-real-world-sentiment-analysis-practice",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Assignment: Real-World Sentiment Analysis Practice",
    "text": "Assignment: Real-World Sentiment Analysis Practice\nAnalyze Social Media Data with Lexicon and LLM Methods\n\nObjective: Practice everything learned using a real-world dataset\nStep 1: Download and Load Data\n\n\n\n\nCode\nlibrary(tidyverse)\n\nreal_comments &lt;- read_csv(\"https://raw.githubusercontent.com/laxmimerit/All-CSV-ML-Data-Files-Download/refs/heads/master/twitter_sentiment.csv\", col_names = c(\"id\",\"entity\", \"sentiment\", \"text\"))\n\nhead(real_comments)\n\n\n\nStep 2: Tokenize and Clean Data\n\n\n\n\n\nCode\nlibrary(tidytext)\nreal_words &lt;- real_comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nStep 3: Compare Lexicons among AFINN, Bing and NRC\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\nbing &lt;- get_sentiments(\"bing\")\nnrc &lt;- get_sentiments(\"nrc\")\n\n# Join and score with AFINN\nreal_sentiment_afinn &lt;- real_words %&gt;%\n  inner_join(afinn, by = \"word\") %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value, na.rm = TRUE))\n\n# Join and score with Bing\nreal_sentiment_bing &lt;- real_words %&gt;%\n  inner_join(bing, by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n# Join and score with NRC (positive/negative)\nreal_sentiment_nrc &lt;- real_words %&gt;%\n  inner_join(nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\")), by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n\n\nStep 4: Visualize Results\n\n\n\n\n\nCode\n# AFINN\nlibrary(ggplot2)\n\nggplot(real_sentiment_afinn, aes(x = id, y = total_score)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"AFINN Sentiment Scores\", x = \"Comment ID\", y = \"Score\") +\n  theme_minimal()\n\n# Bing\nggplot(real_sentiment_bing, aes(x = id)) +\n  geom_bar(aes(y = positive), stat = \"identity\", fill = \"blue\", alpha = 0.5) +\n  geom_bar(aes(y = -negative), stat = \"identity\", fill = \"red\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Positive vs Negative\", x = \"Comment ID\", y = \"Word Count\") +\n  theme_minimal()\n\n\n\nStep 5: (Optional) Use Ollama/LLM for Sentiment\n\n\n\n\n\nCode\n# If you have Ollama and Llama3 installed:\nlibrary(ollamar)\n\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as positive, negative, or neutral, and respond with only the label in lower case:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\nreal_comments &lt;- real_comments %&gt;%\n  mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))\n\n\n\n\n\nStep 6: Compare and Discuss\nCompare lexicon and LLM results\nWhich method best handles sarcasm, mixed emotions, or context?\nWrite a short paragraph (3–5 sentences) on your findings\n\n\n\nDeliverables:\n\nR script with code for all steps\n\nPlots comparing sentiment by method\n\nShort discussion of your results\n\nBonus:\n\nTry analyzing sentiment on comments about another societal topic (e.g. climate change, education, public health)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v2.html#step-10-comparing-afinn-and-bing-continued",
    "href": "Workshop_Sentiment_Analysis_R_v2.html#step-10-comparing-afinn-and-bing-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Comparing AFINN and Bing (continued)",
    "text": "Step 10: Comparing AFINN and Bing (continued)\n\nTask 10.2: Visualize AFINN vs Bing\n\nCreate a bar plot comparing AFINN and Bing sentiments\nUse geom_bar() to show counts of each sentiment per comment\n\n\n\n\n\nCode\n# Reshape the data to long format for plotting\ncomparison_long &lt;- comparison_df2 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing),\n               names_to = \"lexicon\",\n               values_to = \"sentiment\") %&gt;%\n  mutate(lexicon = recode(lexicon, \n                          sentiment_afinn = \"AFINN\", \n                          sentiment_bing = \"Bing\"))\n\n# Create a grouped bar plot to compare sentiment distributions\nggplot(comparison_long, aes(x = sentiment, fill = lexicon)) +\n  geom_bar(position = \"dodge\", alpha = 0.5) +\n  geom_text(stat = \"count\", \n            aes(label = after_stat(count), group = lexicon),\n            position = position_dodge(width = 0.45), \n            vjust = -0.5) +\n  labs(title = \"Comparison of Sentiment Labels: AFINN vs Bing\",\n       x = \"Sentiment\",\n       y = \"Count\",\n       fill = \"Lexicon\") +\n  scale_fill_manual(values = c(\"AFINN\" = \"blue\", \"Bing\" = \"red\")) +\n  theme_minimal()\n\n\n\n\nBing\n\n\n\nCode\nggplot(comment_sentiment_bing, \n       aes(x = id, y = total_score, fill = total_score &gt; 0)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = total_score),\n    vjust = -0.3\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI using Bing lexicon\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"red\", \"blue\"), \n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 9.3: Visualize NRC Emotions\n\nTry visualizing NRC emotions (joy, anger, etc.) using a bar plot\n\nUse geom_bar() to show counts of each emotion per comment\nExample code:\n\n\n\n. . .\n\n\nCode\nwords_nrc_emotions &lt;- words_nrc %&gt;%\n    filter(!sentiment %in% c(\"positive\", \"negative\")) %&gt;%\n    group_by(id, sentiment) %&gt;%\n    summarise(word_count = n(), .groups = \"drop\")\n\nggplot(words_nrc_emotions, aes(x = sentiment, y = word_count, fill = sentiment)) +\n    geom_bar(stat = \"identity\") +\n    facet_wrap(~id, ncol = 6) +\n    labs(title = \"NRC Emotions per Comment\", x = \"Emotion\", y = \"Word Count\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\nTask 9.4: Discuss Lexicon Differences\n\nWhich lexicon (AFINN, Bing, NRC) seems best for your dataset?\n\nConsider factors like vocabulary coverage, sentiment granularity, and performance on your specific comments.\n\n\nTask 9.5: Discuss Nuance and Sarcasm\n\nDoes NRC capture more nuance?\n\nHow do results compare for sarcasm or mixed comments?\nDiscuss how NRC’s emotion-based approach might better capture complex sentiments like sarcasm or mixed emotions compared to AFINN or Bing\n\n\nTask 9.6: Discuss Lexicon Limitations\n\nDiscuss how lexicons like AFINN and Bing may struggle with sarcasm or mixed sentiments\n\ne.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN might score “great” positively, missing the sarcasm"
  },
  {
    "objectID": "Workshop_recommender_systems.html#why-recommender-systems-matter",
    "href": "Workshop_recommender_systems.html#why-recommender-systems-matter",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Why Recommender Systems Matter",
    "text": "Why Recommender Systems Matter\n\nWhy Interesting?\n\nPower apps you use daily\n\nNetflix suggests shows\nTikTok picks videos\nAmazon recommends products\n\nPersonalize experiences, making life easier and fun\n\ne.g. Spotify suggests songs you love based on your listening habits"
  },
  {
    "objectID": "Workshop_recommender_systems.html#why-recommender-system-matter",
    "href": "Workshop_recommender_systems.html#why-recommender-system-matter",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Why Recommender System Matter",
    "text": "Why Recommender System Matter\n\nWhy Important?\n\nDrive business and innovation\n\nCompanies use recommendations to improve user satisfaction\n\nShape society\n\nInfluence what you watch, buy, or learn\ne.g. AI study apps suggest further references to help you learn better"
  },
  {
    "objectID": "Workshop_recommender_systems.html#why-recommender-system-matter-1",
    "href": "Workshop_recommender_systems.html#why-recommender-system-matter-1",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Why Recommender System Matter",
    "text": "Why Recommender System Matter\n\nSocietal Impacts:\n\nBenefits\n\nDiscover new content, save time\n\ne.g. finding a great travel app\n\n\nChallenges\n\nPrivacy concerns\n\ne.g. tracking your likes\n\nfilter bubbles\n\ne.g. biased news feeds\n\n\n\nToday: Build our own (toy) recommender system in R to see how it works!\n\n\n\nContent (6 min): Engage with examples: “Ever wonder how Netflix knows you’d love that new show?”\nHighlight excitement: “You’ll create AI suggestions today!” and importance: “Recommendations affect society.”\nDiscuss pros (personalization) and cons (privacy). Ask: “What’s a recommendation you got recently?”\nPresenter Tips: Use visuals (e.g., show Netflix/TikTok screenshots if possible). Keep high energy to set tone.\nTransition: “Let’s dive into building a recommender for AI products!”\nConnect to real life: “How does TikTok know what videos you like?”\nHighlight pros (personalization) and cons (privacy, bias).\nSet stage for discussions: How do recommendations affect society?\nKeep brief to move to hands-on tasks"
  },
  {
    "objectID": "Workshop_recommender_systems.html#overview",
    "href": "Workshop_recommender_systems.html#overview",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Overview",
    "text": "Overview\n\nthis workshop introduces recommender systems using R in RStudio\nTask: Analyze user ratings for AI-related products (e.g. apps, tools)\n\nLearn basic R commands\nBuild a recommender system — explore the underlying mechanism\n\nRoadmap\n\nBackground on Recommender Systems\nHands-on tasks\nCompare collaborative and content-based methods\nDiscuss AI’s societal role\n\nLearning Goals:\n\nUnderstand recommender systems in AI\nUse R for building and evaluating recommendations\nConnect findings to societal impacts\n\n\n\n\nPrerequisites: No R experience needed. Laptops with R, RStudio, packages.\nMaterials: Dataset in code (user ratings for AI products).\nHighlight fun of personalizing recommendations and societal relevance (e.g., shopping apps).\nKeep intro brief to dive into hands-on tasks."
  },
  {
    "objectID": "Workshop_recommender_systems.html#background-recommender-systems-and-ai-in-society",
    "href": "Workshop_recommender_systems.html#background-recommender-systems-and-ai-in-society",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Background: Recommender Systems and AI in Society",
    "text": "Background: Recommender Systems and AI in Society\n\nWhat are Recommender Systems?\n\nAI systems suggest items based on user preferences\n\ne.g., Netflix movies, Amazon products, Spotify songs\n\nTypes:\n\nCollaborative Filtering: Uses user behavior (e.g. ratings)\nContent-Based: Uses item features (e.g. app categories)\nFactor Models: Finds hidden patterns in ratings\nLDA: Uses topic modeling to group items by themes\n\nUsed in apps, shopping, social media\n\nHow They Work:\n\nCollaborative: Finds similar users/items (e.g. “People like you liked this app”)\nContent-Based: Matches item features to user interests\nFactor Models: Breaks ratings into latent factors (e.g. user preferences for education apps)\nLDA: Identifies topics in items (e.g. StudyApp is “educational”)\n\ne.g. If you buy a product (book), get similar product (book) suggestions\nFocus on the working of collaborative filtering, introduce content-based briefly when time allows\n\n\n\nExplain simply: “Like a friend suggesting movies you’d love.”\nRelate to students: “Ever get YouTube video recommendations?”\nFocus on collaborative filtering today, introduce content-based briefly.\nMention we’ll compare both to see differences.\nTransition to hands-on: “Let’s build recommenders for AI products!”"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-1-introduction-and-setup",
    "href": "Workshop_recommender_systems.html#step-1-introduction-and-setup",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 1: Introduction and Setup",
    "text": "Step 1: Introduction and Setup\nObjective: Set up RStudio\n\nTask 1.1: Open RStudio\n\nOpen RStudio, create new R script: File &gt; New File &gt; R Script\n\nTask 1.2: Install Packages\n\n\n\n\nCode\ninstall.packages(c(\"tidyverse\", \"recommenderlab\", \"proxy\", \"topicmodels\", \"text2vec\"))\n\n\n\n\n8 minutes\nContent: Explain recommendation systems: “AI suggests things you might like.” Introduce RStudio (console, script).\nPresenter Tips: Assist with RStudio setup. Ensure packages are pre-installed to save time.\nPractice (2 min): Run print(“Hello, I’m learning R!”) in console. Guess what an AI app recommendation might look like.\nDiscussion (1 min): Why are recommendations useful? Example: AI study apps.\nKeep pace brisk to fit 2 hours"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-2-loading-tools-and-data",
    "href": "Workshop_recommender_systems.html#step-2-loading-tools-and-data",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 2: Loading Tools and Data",
    "text": "Step 2: Loading Tools and Data\nObjective: Load packages and dataset\n\nDataset: 30 users rating 10 AI products (1–5 scale)\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(recommenderlab)\nlibrary(proxy)\n\n\nratings &lt;- matrix(sample(c(NA, 1:5), 300, replace = TRUE, prob = c(0.7, 0.1, 0.1, 0.1, 0.05, 0.05)), \n                 nrow = 30, ncol = 10)\n\ncolnames(ratings) &lt;- c(\"StudyApp\", \"ChatBot\", \"ArtGen\", \"CodeTool\", \"VoiceAI\", \n                       \"HealthAI\", \"GameAI\", \"MusicAI\", \"CarAI\", \"TutorAI\")\n\nrownames(ratings) &lt;- paste0(\"User\", 1:30)\n\nratings &lt;- as(ratings, \"realRatingMatrix\")\n\n\n\nTask 2.1: Run code (Ctrl+Enter)\nTask 2.2: take a look at the ratings matrix\n\nRun View(as(ratings, \"matrix\"))\n\n\n\n\nContent: Introduce dataset: “Ratings for AI products like study apps.”\nPresenter Tips: Show ratings in RStudio (View(as(ratings, “matrix”))). Explain NA means no rating.\nPractice (2 min): Run dim(ratings). How many users/products?\nDiscussion (1 min): How do ratings reflect AI preferences? Example: AI in gaming.\nAssist with package errors; move quickly"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-3-exploring-the-dataset",
    "href": "Workshop_recommender_systems.html#step-3-exploring-the-dataset",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 3: Exploring the Dataset",
    "text": "Step 3: Exploring the Dataset\nObjective: Understand dataset structure\n\nthe dateset is a matrix of user ratings for AI products\nTask 2.3: Check dimensions and first few ratings\n\nRun dim(ratings)\nRun colnames(ratings)\n\n\n\n\n\nCode\ndim(ratings)\ncolnames(ratings)\n\n\n\nTask 3.1: look at the subset of the matrix\n\nRun ratings@data[1:3, 1:3]\n\nTask 3.2: Which user rated most?\n\nRun rowSums(ratings@data, na.rm = TRUE)[1:5]\n\n\n\n\n7 minutes\nContent: Explain: “Matrix shows user preferences for AI tools.”\nPresenter Tips: Show first few ratings. Highlight sparsity (many NAs).\nPractice (2 min): Run rowSums(ratings@data, na.rm = TRUE)[1:5]. Which user rated most?\nDiscussion (1 min): Why explore ratings? How do they show AI’s role in society?\nKeep tasks simple to stay on track"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-4-building-a-collaborative-filtering-model",
    "href": "Workshop_recommender_systems.html#step-4-building-a-collaborative-filtering-model",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 4: Building a Collaborative Filtering Model",
    "text": "Step 4: Building a Collaborative Filtering Model\nObjective: Create user-based collaborative filtering model\n\nRecommends products based on similar users’ ratings\n\n\n\n\nCode\nrecommender_ubcf &lt;- Recommender(ratings, method = \"UBCF\", \n                               param = list(normalize = \"center\", \n                                            method = \"cosine\"))\n\n\n\nTask 4.1: Run code\nTask 4.2: Check model details\n\nRun getModel(recommender)$description\n\n\n\n\n10 minutes\nContent\n\nExplain: “Finds users with similar ratings to suggest products.”\nPresenter Tips\n\nDescribe UBCF: “Like suggesting a game because your friend likes it.”\n\nPractice (3 min): Check model details. Guess what StudyApp’s rating might be for User1.\n\nDiscussion (2 min):\n\nHow does collaborative filtering help users? Example: App suggestions.\n\nEnsure code runs smoothly"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-5-generating-recommendations",
    "href": "Workshop_recommender_systems.html#step-5-generating-recommendations",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 5: Generating Recommendations",
    "text": "Step 5: Generating Recommendations\nObjective: Predict recommendations for users\n\nSuggest top AI products for users\n\n\n\n\nCode\npredictions_ubcf &lt;- predict(recommender_ubcf, ratings[1:5], n = 2)\n\npred_list_ubcf &lt;- as(predictions_ubcf, \"list\")\n\n\n\nTask 5.1: see User1’s recommendations\n\nRun pred_list[[1]]\n\nTask 5.2: Check recommendations for User2\n\nRun pred_list[[2]]\n\n\n\n\n10 minutes\nContent\n\nExplain: “Predicts products users might like.”\nPresenter Tips: Show recommendations\n\ne.g., User1 gets StudyApp)\nRelate to Netflix\n\n\nPractice (3 min)\n\nNote User1’s top recommendation. Why might it fit?\n\nDiscussion (2 min)\n\nHow do recommendations improve AI app use?\n\nExample: Study tools.\n\n\nAssist with output interpretation"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-6-content-based-approach",
    "href": "Workshop_recommender_systems.html#step-6-content-based-approach",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 6: Content-Based Approach",
    "text": "Step 6: Content-Based Approach\nObjective: Compare with content-based filtering\n\nUse product features\n\ne.g., categories: Education, Health\n\n\n\n\n\nCode\n# Product features (simplified: 1 = has feature, 0 = doesn’t)\n\nfeatures &lt;- matrix(c(\n  1, 0, 0, 1, 0, 0, 0, 0, 0, 1,  # StudyApp: Education, Coding\n  0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  # ChatBot: Interaction\n  0, 0, 1, 0, 0, 0, 1, 1, 0, 0,  # ArtGen: Creativity, Gaming\n  1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  # CodeTool: Education, Coding\n  0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  # VoiceAI: Interaction\n  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  # HealthAI: Health\n  0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  # GameAI: Creativity, Gaming\n  0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  # MusicAI: Creativity\n  0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  # CarAI: Driving\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 1   # TutorAI: Education\n  ), \n  nrow = 10, byrow = TRUE)\n\ncolnames(features) &lt;- c(\"Education\", \"Interaction\", \"Creativity\", \"Coding\", \n                        \"Voice\", \"Health\", \"Gaming\", \"Music\", \"Driving\", \"Tutoring\")\n\nrownames(features) &lt;- colnames(ratings)\n\n# Cosine similarity for content-based recommendations\nsim_matrix &lt;- as.matrix(simil(features, method = \"cosine\"))\n\ncontent_recs &lt;- apply(sim_matrix, 1, function(x) names(sort(x, decreasing = TRUE)[2]))\n\n\n\nTask 6.1: Check “StudyApp”\n\nRun content_recs[\"StudyApp\"]\n\nTask 6.2: Check “ChatBot”\n\nRun content_recs[\"ChatBot\"]\n\n\n\n\n10 minutes\nContent: Explain: “Recommends based on product features, like app categories.”\nPresenter Tips: Show similarity (e.g., StudyApp → TutorAI). Compare to UBCF.\nPractice (3 min): Note StudyApp’s similar product. Why similar?\nDiscussion (2 min): How does content-based filtering differ? Example: Health apps.\nSimplify cosine similarity explanation: “Matches similar features”"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-7-evaluating-recommendations",
    "href": "Workshop_recommender_systems.html#step-7-evaluating-recommendations",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 7: Evaluating Recommendations",
    "text": "Step 7: Evaluating Recommendations\nObjective: Assess recommendation quality\n\nCheck if predictions match user interests\n\n\n\n\nCode\n# Split data for evaluation\ntrain &lt;- ratings[1:20]\ntest &lt;- ratings[21:30]\n\nrecommender &lt;- Recommender(train, method = \"UBCF\", \n                          param = list(normalize = \"center\", \n                                       method = \"cosine\"))\n\npred_test &lt;- predict(recommender, test, n = 2)\n\n\n\nTask 7.1: Check User21’s predictions\n\nRun as(pred_test, \"list\")[[1]]\n\nTask 7.2: Compare to actual ratings\n\nCompare to as(test, \"matrix\")[1, ]\n\n\n\n\n10 minutes\nContent: Explain\n\n“Test if recommendations match actual ratings.”\n\nPresenter Tips\n\nShow test user’s predictions vs. actual ratings.\n\nPractice\n\nCheck User21’s recommendations\nDo they fit?\n\nDiscussion\n\nWhy evaluate accuracy?\nExample: Bad app suggestions\n\nKeep evaluation simple for beginners"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-8-visualizing-and-discussing-results",
    "href": "Workshop_recommender_systems.html#step-8-visualizing-and-discussing-results",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 8: Visualizing and Discussing Results",
    "text": "Step 8: Visualizing and Discussing Results\nObjective: Visualize recommendations, compare methods, discuss societal impact\n\nPlot top recommendations; compare collaborative vs. content-based\nCollaborative Filtering Plot:\n\n\n\n\nCode\ntop_recs &lt;- as(predictions, \"list\")[[1]]\n\nrec_data &lt;- tibble(Product = top_recs, Score = 1:length(top_recs))\n\nggplot(rec_data, aes(x = reorder(Product, Score), y = Score)) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  labs(title = \"Top Recommendations for User1 (Collaborative)\", x = \"Product\", y = \"Rank\") +\n  theme_minimal()\n\n\n\nComparison Plot\n\n\n\n\n\nCode\ncomparison &lt;- tibble(\n  Product = c(colnames(ratings)[1:2], content_recs[1:2]),\n  Method = rep(c(\"Collaborative\", \"Content-Based\"), each = 2),\n  Rank = rep(1:2, 2)\n  )\n\nggplot(comparison, \n       aes(x = Product, y = Rank, fill = Method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Recommendation Comparison\", \n       x = \"Product\", \n       y = \"Rank\") +\n  scale_fill_manual(values = c(\"#1f77b4\", \"#ff7f0e\")) +\n  theme_minimal()\n\n\n\nTask 8.1: Run collaborative plot\n\nNote User1’s top product\n\nTask 8.2: Run comparison plot\nCompare methods for StudyApp\nTask 8.3: Check differences\n\nRun tibble(Collaborative = pred_list[[1]], ContentBased = content_recs[pred_list[[1]]])\n\n\n\n\n16 minutes\nStudyApp: Collaborative (user-driven) vs. Content-Based (feature-driven)\nChatBot: May differ due to interaction features\nWhy do methods differ?\n\nCollaborative uses ratings, content-based uses features\nSocietal impacts\n\nPersonalization vs. privacy filter bubbles\n\n\nHow can recommendations improve AI use in society?\nContent\n\nExplain\n\n“Collaborative uses user similarity; content-based uses product features”\n\nPresenter Tips\n\nShow plots\n\nhighlight StudyApp differences\n\ne.g., collaborative suggests TutorAI, content-based suggests CodeTool\n\n\n\nPractice (5 min)\n\nRun plots, check differences for StudyApp/ChatBot\n\n\nDiscussion (6 min): How do recommendations affect choices?\n\ne.g. Biased social media feeds\nLimits (privacy concerns)"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-9-factor-models-for-recommendations",
    "href": "Workshop_recommender_systems.html#step-9-factor-models-for-recommendations",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 9: Factor Models for Recommendations",
    "text": "Step 9: Factor Models for Recommendations\nObjective: Use matrix factorization for recommendations\n\nBreaks ratings into latent factors (e.g., user preferences for education apps)\n\n\n\n\nCode\nrecommender_svd &lt;- Recommender(ratings, method = \"SVD\", \n                              param = list(k = 5))  # 5 latent factors\n\npredictions_svd &lt;- predict(recommender_svd, ratings[1:5], n = 2)\n\npred_list_svd &lt;- as(predictions_svd, \"list\")\n\n\n\nTask 9.1: Check User1’s SVD recommendations\n\nRun pred_list_svd[[1]]\n\nTask 9.2: Compare User1’s UBCF vs. SVD\n\nRun c(UBCF = pred_list_ubcf[[1]], SVD = pred_list_svd[[1]])\n\n\n\n\n10 minutes\nContent: Explain: “Factor models find hidden patterns, like preferring educational apps.”\nPresenter Tips: Simplify SVD: “Breaks ratings into user/item traits.” Show User1’s differences.\nPractice (3 min): Check User1’s SVD recommendations. Note differences from UBCF.\nDiscussion (2 min): Why might SVD differ? Example: Capturing broader preferences.\nKeep explanation simple: “Like grouping apps by hidden themes.”"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-10-lda-for-recommendations",
    "href": "Workshop_recommender_systems.html#step-10-lda-for-recommendations",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 10: LDA for Recommendations",
    "text": "Step 10: LDA for Recommendations\nObjective: Use Latent Dirichlet Allocation for recommendations\n\nModels items as topics (e.g., “educational” or “creative”) based on ratings\n\n\n\n\nCode\n# Convert ratings to binary (rated = 1, not rated = 0) for LDA\nratings_binary &lt;- ratings\nratings_binary@data[!is.na(ratings_binary@data)] &lt;- 1\nratings_binary@data[is.na(ratings_binary@data)] &lt;- 0\n\n# Run LDA with 5 topics\nlda_model &lt;- LDA(ratings_binary@data, k = 5, control = list(seed = 123))\nitem_topics &lt;- posterior(lda_model)$topics\n\n# Recommend items with similar topics for User1\nuser1_topics &lt;- item_topics[1, ]\nlda_recs &lt;- colnames(ratings)[order(item_topics[1, ], decreasing = TRUE)[1:2]]\n\n\n\nTask 10.1: Run lda_recs\nTask 10.2: Compare User1’s UBCF vs. LDA\n\nRun c(UBCF = pred_list_ubcf[[1]], LDA = lda_recs)\n\n\n\n\n10 minutes\nContent: Explain: “LDA groups items by themes, like ‘education’ or ‘gaming.’”\nPresenter Tips: Simplify: “Like sorting apps into categories based on ratings.” Show User1’s LDA recs.\nPractice (3 min): Check LDA recommendations. Note differences from UBCF.\nDiscussion (2 min): Why might LDA differ? Example: Theme-based suggestions.\nSimplify LDA: “Finds what apps have in common.”"
  },
  {
    "objectID": "Workshop_recommender_systems.html#step-11-visualizing",
    "href": "Workshop_recommender_systems.html#step-11-visualizing",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Step 11: Visualizing",
    "text": "Step 11: Visualizing\nObjective: Visualize recommendations, compare methods, discuss societal impact\n\nPlot top recommendations; compare UBCF, SVD, and LDA\nCollaborative Filtering Plot:\n\n\n\n\nCode\ntop_recs_ubcf &lt;- pred_list_ubcf[[1]]\n\nrec_data &lt;- tibble(Product = top_recs_ubcf, Score = 1:length(top_recs_ubcf))\n\nggplot(rec_data, \n       aes(x = reorder(Product, Score), y = Score)) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  labs(title = \"Top Recommendations for User1 (UBCF)\", \n       x = \"Product\", y = \"Rank\") +\n  theme_minimal()\n\n\n\nComparison Plot:\n\n\n\n\n\nCode\ncomparison &lt;- tibble(\n  Product = c(pred_list_ubcf[[1]],  pred_list_svd[[1]], lda_recs),\n  Method = rep(c(\"UBCF\", \"SVD\", \"LDA\"), each = 2),\n  Rank = rep(1:2, 3)\n)\n\nggplot(comparison,\n       aes(x = Product, y = Rank, fill = Method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Recommendation Comparison for User1\", x = \"Product\", y = \"Rank\") +\n  scale_fill_manual(values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\")) +\n  theme_minimal()\n\n\n\nTask 8.1: Run UBCF plot. Note User1’s top product\n\nRun top_recs_ubcf\n\nTask 8.2: Run comparison plot. Compare methods for StudyApp\n\nRun comparison\n\nTask 8.3: Check differences\n\nRun tibble(UBCF = pred_list_ubcf[[1]], SVD = pred_list_svd[[1]], LDA = lda_recs)\n\nStudyApp: UBCF (user similarity), SVD (latent factors), LDA (topic-based)\nChatBot: May differ due to thematic grouping in LDA\n\n\n\n\n\n15 minutes\nContent: Explain: “UBCF uses user similarity, SVD finds patterns, LDA groups by themes.”\nPresenter Tips: Show plots; highlight StudyApp differences (e.g., UBCF vs. LDA). Pre-compute LDA if slow.\nPractice (4 min): Run plots, check differences for StudyApp/ChatBot.\nDiscussion (5 min): Discuss: How do recommendations affect choices? Example: Biased social media feeds. Limits (privacy concerns)?\nTakeaway: Recommendation systems personalize AI but raise ethical questions.\nResources: R for Data Science (https://r4ds.had.co.nz), Recommender Systems Handbook, Kaggle datasets.\nWrap up, encourage exploring movie datasets."
  },
  {
    "objectID": "Workshop_recommender_systems.html#discussion",
    "href": "Workshop_recommender_systems.html#discussion",
    "title": "Hands-On Introduction to Recommender Systems with R",
    "section": "Discussion",
    "text": "Discussion\n\nWhy do methods differ? (UBCF: user similarity, SVD: hidden patterns, LDA: themes)\nSocietal impacts: Personalization vs. privacy, filter bubbles\nHow can recommendations improve AI use in society?\n\n\n\n5 min\nFacilitator Notes {visibility=“hidden”}\n\nPreparation:\n\nInstall R, RStudio, packages (tidyverse, recommenderlab, topicmodels)\nPre-test code to avoid errors. Pre-compute LDA if hardware is limited.\n\nDataset:\n\n30 users, 10 AI products, sparse ratings matrix to mimic real-world data\n\nPacing: Total ~120 min\n\nWhy: 6 min\nOverview: 4 min\nBackground: 9 min\nSteps 1–3: 7 min each\nSteps 4–7: 10 min each\nStep 8: 14 min\nSkip Task 6.2 or 7.2 if needed\n\n\nEngagement:\n\nRelate to students’ lives (e.g., app suggestions)\nDiscuss privacy in Step 8\n\nTroubleshooting: Assist with RStudio navigation, package installation, LDA convergence issues\n\n```"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#overview",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#overview",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Overview",
    "text": "Overview\n\nThis 2-hour workshop introduces high school students to sentiment analysis using R in RStudio\nwe will analyze social media comments about AI’s societal impact\n\nlearning basic R commands\nexploring how sentiment analysis reveals public opinions\n\nRoadmap\n\nbackground on sentiment analysis\nhands-on tasks\ndiscussions linking AI to society\n\nLearning Goals:\n\nUnderstand sentiment analysis and how AI can enhance it\nLearn basic R commands for text analysis\nAnalyze sentiments in comments about AI’s societal impact\nDiscuss how sentiment analysis informs AI’s role in society\n\n\n\nPrerequisites: No R experience needed. Students need R and RStudio installed.\nMaterials: Laptops with R and RStudio, a simple dataset (provided in code)."
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#background-sentiment-analysis-and-ai-in-society",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#background-sentiment-analysis-and-ai-in-society",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nWhat is Sentiment Analysis?\n\nSentiment analysis is an AI technique that identifies emotions in text\n\ncommonly label them\n\npositive\n\ne.g. I love this!\n\nnegative\n\ne.g. This is scary\n\nneutral\n\ne.g. It’s fine\n\n\n\n\nit is used to understand public opinions/public attitudes\n\ne.g. how people feel about AI in education, jobs, or healthcare"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#background-sentiment-analysis-and-ai-in-society-1",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#background-sentiment-analysis-and-ai-in-society-1",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nHow it Works:\n\nLexicon-based\n\nUses a dictionary to assign labels/scores to words\n\ne.g., awesome \\(\\rightarrow\\) positive; worried \\(\\rightarrow\\) negative\n\nWe mainly focus on this approach today for simplicity\n\nMachine Learning-based\n\nTrains machine learning models on labeled data to predict sentiment\n\ne.g., “I love AI!” → positive, “AI is scary” → negative\n\nMore complex but powerful\n\nAdvanced AI\n\nLLM models (like ChatGPT, Deepseek)\nit analyze context for higher accuracy, but they are complex"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#background-sentiment-analysis-and-ai-in-society-2",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#background-sentiment-analysis-and-ai-in-society-2",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nConnection to AI and Society:\n\nSentiment analysis reveals public attitudes toward AI and products, helping understand its societal impact.\n\nExamples:\n\nCompanies analyze tweets to improve their products\nGovernments study comments to address concerns about the satisfaction of its public services\n\nResearchers explore how AI in healthcare is perceived\n\ne.g. trust in AI diagnostics\n\n\n\nBy analyzing text, we learn what excites or worries people, driving further development to benefit society\n\n\n\nAI is transforming society—powering education tools, automating jobs, and aiding doctors\nUnderstanding public sentiment ensures AI is developed responsibly, addressing fears (e.g., privacy) and amplifying benefits\n\ne.g., better learning"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-1-introduction-and-setup",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-1-introduction-and-setup",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 1: Introduction and Setup",
    "text": "Step 1: Introduction and Setup\n\nObjective: set up RStudio\nTask 1.1: Open RStudio\n\nOpen RStudio\n\nCreate a new R script: File &gt; New File &gt; R Script\n\nSave as sentiment_workshop.R if needed\n\n\nTask 1.2: Install Packages\n\nRun in the console\n\n\n\n\n\nCode\n# Install necessary packages for sentiment analysis\ninstall.packages(c(\"tidyverse\", \"tidytext\", \"textdata\"))\n\n\n\nnote: tidyverse for data tasks; tidytext for text analysis; textdata for sentiment dictionaries\n\n\n\nStep 1 - 10 minutes\nEnsure textdata package is installed, as it provides AFINN, Bing, and NRC lexicons\nContent:\n\nExplain sentiment analysis: “It’s like teaching a computer to read emotions in text, like excitement or fear about AI.”\nLink to AI and Society: “We’ll analyze comments about AI to see how people feel about its impact on jobs or schools.”\n\nRStudio basics: Console (for commands), script editor (for saving code)\n\nPractice (3 minutes):\nType print(“Hello, I’m learning R!”) in the console and press Enter. What happens?\n\nGuess: What sentiment score might “excited” have in a dictionary? “Sad”?\n\nDiscussion (2 minutes):\n\nWhy study sentiments about AI?\n\nExample: How could knowing if people love or fear AI in schools help teachers?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-2-loading-tools-and-data",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-2-loading-tools-and-data",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 2: Loading Tools and Data",
    "text": "Step 2: Loading Tools and Data\n\nObjective: Load R packages and a dataset of comments\nDataset\n\nFictional social media comments about AI’s societal impact\n\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(textdata)\n\ncomments &lt;- tibble(\n  id = 1:30,\n  text = c(\n    \"AI is amazing and will make education so much better!\",\n    \"I’m worried AI will take over jobs and leave people unemployed.\",\n    \"AI helps doctors save lives, it’s a game-changer.\",\n    \"I don’t trust AI, it feels creepy and invasive.\",\n    \"AI is okay, but it needs regulation to be safe.\",\n    \"AI in schools is cool, but it’s not perfect.\",\n    \"Wow, AI is so great, it’ll solve all our problems… yeah, right!\",  # Sarcasm\n    \"AI makes healthcare faster and more accurate, love it!\",\n    \"Why does AI know so much about me? It’s unsettling.\",\n    \"AI chatbots are fun to talk to, but sometimes useless.\",\n    \"AI in movies is awesome, makes everything so realistic!\",\n    \"I’m scared AI will control everything one day.\",\n    \"AI helps me study better, it’s like a personal tutor.\",\n    \"AI is overhyped, it’s not as smart as people think.\",  # Mixed\n    \"Using AI for art is creative and inspiring!\",\n    \"AI in cars? No way, I don’t trust self-driving tech.\",\n    \"AI makes my phone so smart, it’s incredible!\",\n    \"I feel like AI is watching me all the time, creepy.\",\n    \"AI in gaming makes battles so epic, I’m hooked!\",\n    \"AI might replace teachers, and that’s not cool.\",\n    \"AI saves time at work, but I miss human interaction.\",\n    \"AI’s fine, but it makes mistakes sometimes.\",  # Neutral\n    \"AI in music creation is a total game-changer!\",\n    \"I’m skeptical about AI making fair decisions.\",\n    \"AI is great, but only if it’s used ethically.\",  # Mixed\n    \"AI makes life easier, but it’s a bit scary too.\",  # Mixed\n    \"AI in agriculture boosts crops, amazing stuff!\",\n    \"I don’t get why everyone loves AI so much.\",  # Negative\n    \"AI tutors are helpful, but they don’t replace real teachers.\",\n    \"AI sounds cool, but I’m not sure it’s safe.\"  # Mixed\n  )\n)\n\n\n\nTask 2.1: Run the Code\n\nRun the code (highlight and press Ctrl+Enter)\n\nTask 2.2: View the Data\n\nprint(comments)\n\nTask 2.3: View comments\n\nRun view(comments) in the console\n\nHow many comments are there?\n\n\n\n\n\n10 minutes\nContent:\n\nIntroduce dataset: “We’ll analyze comments about AI’s impact on society, like education and jobs”\n\nThe dataset now includes 30 varied comments, covering:\n\nPositive: e.g., “AI makes healthcare faster and more accurate, love it!”\nNegative: e.g., “I’m scared AI will control everything one day.”\nNeutral: e.g., “AI’s fine, but it makes mistakes sometimes.”\nComplex: e.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm), “AI is great, but only if it’s used ethically” (mixed emotions).\nComplex comments challenge lexicon-based approaches\n\nsarcasm (e.g. comment 7)\nmixed sentiments (e.g. comments 14, 25, 26, 30)\n\nAFINN may misinterpret due to its word-based scoring\n\n\n\nComments like “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm) may score positively due to words like “great” but are negative in context\nMixed comments (e.g., “AI makes life easier, but it’s a bit scary too”) combine positive and negative words, potentially leading to misleading scores\nRun colnames(comments) and nrow(comments)\nWrite down: Which comment seems happiest about AI? Most negative?\n\nExample: “AI is amazing” vs. “AI feels creepy”\n\nDiscussion (2 minutes):\n\nHow might these comments reflect real opinions about AI?\n\nExample: What might someone post about AI in movies or games?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-3-exploring-the-dataset",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-3-exploring-the-dataset",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 3: Exploring the Dataset",
    "text": "Step 3: Exploring the Dataset\n\nObjective: Understand the dataset’s structure\n\n\n\n\nCode\ncolnames(comments)\nnrow(comments)\n\ncomments$text[1]\n\n\n\nTask 3.1: View Specific Comments\n\nRun ncol(comments) to check how many columns are in the dataset\n\nTask 3.2: View Specific Comments\n\nRun comments$text[4] to see the fourth comment\n\n\n\n\n5 min\nContent:\n\nDataset has id (comment number) and text (comment content)\nExploring data helps us know what we’re analyzing\n\nTask: View a Specific Comment\n\nRun comments$text[3]\n\nWhat does comment 3 say?\n\n\nPractice (3 minutes):\n\nRun comments$text[4]. What does it say?\n\nRun ncol(comments). How many columns in the dataset?\n\nWrite down: What does id tell us about each comment?\n\nDiscussion (2 minutes):\n\nWhy explore data before analyzing it?\n\nHow can comments about AI help us understand its societal role?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-4-splitting-text-into-words",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-4-splitting-text-into-words",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 4: Splitting Text into Words",
    "text": "Step 4: Splitting Text into Words\n\nObjective: Learn tokenization to break text into words\nTokenization splits sentences into words\n\ne.g. “AI is cool” \\(\\rightarrow\\) {“AI,” “is,” “cool”}\nWords are the building blocks for (most) sentiment analysis\n\n\n\n\n\nCode\nwords &lt;- comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nTask 4.1: View Words\n\nprint(words)\n\nTask 4.2: How many words are there?\n\nRun nrow(words)\n\nTask 4.3: View First 5 Words\n\nRun head(words, 5)\n\nTask 4.4: How many unique words are there?\n\nRun n_distinct(words$word)\n\nTask 4.5: View Most Common Words\n\nRun words %&gt;% count(word, sort = TRUE) %&gt;% head(10)\n\nTask 4.6: How many times does “better” appear?\n\nRun words %&gt;% filter(word == \"better\")\n\n\n\n\n12 minutes\nGuess: Which words might show strong emotions?\n\nDiscussion\n\nWhy split text into words?\n\nHow might words like “amazing” or “creepy” reflect feelings about AI?\n\n\nwords %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-5-exploring-sentiment-lexicons",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-5-exploring-sentiment-lexicons",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons",
    "text": "Step 5: Exploring Sentiment Lexicons\n\nObjective: Understand how lexicons assign sentiment scores\nA lexicon is a dictionary scoring words’ emotions\n\nAFINN: -5 to +5\n\ne.g. “Happy” = +3, “scary” = -2\n\nAlternatives\n\nBing:\n\na binary classification: positive/negative\n\nNRC:\n\nemotion-based (e.g. joy, anger) and positive/negative classifications\n\n\n\nHere, AI uses lexicons to quantify feelings in text\n\n\n\n12 minutes"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-5-exploring-sentiment-lexicons-continued",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-5-exploring-sentiment-lexicons-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons (continued)",
    "text": "Step 5: Exploring Sentiment Lexicons (continued)\n\nWe will use the AFINN lexicon, which assigns scores to words based on their sentiment\n\nPositive words have positive scores, negative words have negative scores\nNeutral words have a score of 0\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\n\n\n\nTask 5.1: View Lexicon\n\nRun: head(afinn, 10)\n\nTask 5.2: Check Scores for Specific Words\n\nRun: afinn %&gt;% filter(word == \"trust\")\nWhat’s its score?\n\nRun: afinn %&gt;% filter(word == \"bad\")\nGuess the score for “awesome”\nList two words you think are negative\n\n\n\n\nCheck with afinn %&gt;% filter(word == \"awesome\")\nCheck their scores with afinn %&gt;% filter(word %in% c(\"word1\", \"word2\"))\nDiscussion (2 minutes):\n\nHow does a lexicon help AI understand text?\n\nWhy might it miss complex emotions (e.g., “AI is cool but scary”)?\n\nget_sentiments(“bing”) or get_sentiments(“nrc”)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-6-scoring-words-for-sentiment",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-6-scoring-words-for-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 6: Scoring Words for Sentiment",
    "text": "Step 6: Scoring Words for Sentiment\n\nObjective: Assign sentiment scores to words\nMatch dataset words to AFINN lexicon scores\n\nOnly words in the lexicon get scores\n\n\n\n\n\nCode\nsentiment_scores &lt;- words %&gt;%\n  inner_join(afinn, by = \"word\")\n\n\n\nTask 6.1: View Scores\n\nRun: print(sentiment_scores)\nList one positive and one negative word\n\nTask 6.2: Count Negative Words\n\nRun: sentiment_scores %&gt;% filter(value &lt; 0)\n\nTask 6.3: Count Positive Words\n\nRun: sentiment_scores %&gt;% filter(value &gt; 0)\n\n\n\n\nGuess: Why might some words (e.g., “AI”) not appear?\nDiscussion (2 minutes):\nHow do scores show opinions about AI?\n\nExample: How might negative scores about AI jobs affect workers?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-7-summarizing-comment-sentiment",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-7-summarizing-comment-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 7: Summarizing Comment Sentiment",
    "text": "Step 7: Summarizing Comment Sentiment\n\nObjective: Calculate total sentiment for each comment\nSum word scores per comment to get its overall sentiment\n\nPositive total = Sum of positive comments (scores)\nNegative total = Sun of negative comments (scores)\nsentiment = positive total - negative total\n\n\n\n\n\nCode\ncomment_sentiment &lt;- sentiment_scores %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value)) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  arrange(id)\n\n\n\nTask 7.1: View Results\n\nRun print(comment_sentiment)\nWhich comment has the lowest score?\n\nTask 7.2: Sort by Total Score\n\nRun comment_sentiment %&gt;% arrange(desc(total_score))\nWhich is most positive?\n\nTask 7.3: Check Comment 18’s Score\n\nRead comment 18’s text and score\nDo they match?\n\nTask 7.4: Check Neutral Comments\n\nRun comment_sentiment %&gt;% filter(total_score == 0)\nAny neutral comments?\n\nTask 7.5: Add Sentiment Labels\n\nRun the following code\n\n\n\n\n\n\nCode\ncomment_sentiment &lt;- comment_sentiment %&gt;% \n  mutate(sentiment = case_when(is.na(total_score) ~ NA_character_,\n                               total_score &gt; 0 ~ \"Positive\", \n                               total_score &lt; 0 ~ \"Negative\",\n                               TRUE ~ \"Neutral\"))\n\n\n\n\nStep 7 - 15 minutes\nDiscussion (2 minutes):\n\nWhat do scores tell us about views on AI?\n\nExample: How might positive scores about AI in healthcare help doctors?\n\nTask 7.5: Add a New Comment\n\nAdd a new comment comments &lt;- comments %&gt;% add_row(id = 31, text = \"AI makes learning fun but can be confusing.\")\n\nWhat’s the new comment’s score?\n\nRun comment_sentiment %&gt;% filter(total_score &gt; 0) - How many positive comments?\n\n\ntable(comment_sentiment$sentiment, useNA=“ifany”)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-8-visualizing-and-discussing-results",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-8-visualizing-and-discussing-results",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 8: Visualizing and Discussing Results",
    "text": "Step 8: Visualizing and Discussing Results\n\nObjective: Visualize sentiment and discuss AI’s societal impact\nCreate a bar plot to see positive/negative sentiments\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = id, y = total_score, fill = sentiment)) +\n  geom_bar(stat = \"identity\", na.rm = TRUE) +\n  geom_text(\n    data = filter(comment_sentiment, !is.na(total_score)),\n    aes(\n      label = total_score,\n      vjust = case_when(\n        total_score &gt;= 0 ~ -0.3,\n        total_score &lt; 0  ~ 1.3\n      )\n    )\n  ) +\n  geom_text(\n    data = filter(comment_sentiment, is.na(total_score)),\n    aes(y = 0, label = \"NA\"),\n    vjust = -0.3,\n    color = \"black\",\n    size = 2\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI usign AFINN\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"Negative\" = \"red\", \"Positive\" = \"blue\"),\n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE # don't show NA in the legend\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 8.1: Create Plot\n\nRun the plot code\n\nIdentify: Which comments are blue (positive)? Red (negative)?\n\nTask 8.2: Plot the density of sentiment distribution\n\nCreate a density plot of sentiment scores\nUse geom_density() to visualize the distribution\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = total_score, fill = sentiment)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Density Plot of Comment Sentiment Scores\",\n       x = \"Sentiment Score\", y = \"Density\") +\n  theme_minimal()\n\n\n\nTask 8.3: Plot the histogram of sentiment label\n\nCreate a histogram of sentiment labels\nUse geom_bar() to visualize counts of each sentiment label\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = sentiment, fill = sentiment)) +\n  geom_bar() +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -0.5\n  ) +\n  labs(title = \"Histogram of Sentiment Labels\",\n       x = \"Sentiment\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\nStep 8 - 24 minutes\nPractice (6 minutes)\n\nRun comment_sentiment %&gt;% filter(id == 7). Why might the sarcastic comment’s score be misleading?\nTry the Bing lexicon: Replace afinn with get_sentiments(“bing”) in Step 6 and rerun Steps 6–8\n\nCompare results"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-9-exploring-other-lexicon",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-9-exploring-other-lexicon",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon",
    "text": "Step 9: Exploring other Lexicon\nObjective: Explore Bing and NRC sentiment lexicons as alternatives to AFINN\n\nWhat are Bing and NRC? (recap)\n\nBing Lexicon:\n\nClassifies words as “positive” or “negative” only (no score)\n\nNRC Lexicon:\n\nAssigns words to emotions (joy, anger, fear, etc.) and positive/negative\n\n\nTasks: Load Bing and NRC Lexicons\n\n\n\n\nCode\nlibrary(tidytext)\n\nbing &lt;- get_sentiments(\"bing\")\n\nnrc &lt;- get_sentiments(\"nrc\")\n\n\n\nTask: View Lexicon Examples\n\n\n\n\n\nCode\nhead(bing, 10)\n\nhead(nrc, 10)\n\n\n\nTask: Join Words with Bing\n\n\n\n\n\nCode\nwords_bing &lt;- words %&gt;%\n  inner_join(bing, by = \"word\")\n\nwords_nrc &lt;- words %&gt;%\n  inner_join(nrc, by = \"word\")\n\n\n\n\nsome words show up more than 1 time\n\nword_counts &lt;- bing %&gt;% group_by(word) %&gt;% summarise(count = n()) %&gt;% filter(count &gt; 1)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-9-exploring-other-lexicon-continued",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-9-exploring-other-lexicon-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon (continued)",
    "text": "Step 9: Exploring other Lexicon (continued)\n\nSummarize Sentiment by Comment (Bing)\n\n\n\n\nCode\ncomment_sentiment_bing &lt;- words_bing %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n      is.na(total_score) ~ NA_character_,\n      total_score &gt; 0 ~ \"Positive\",\n      total_score &lt; 0 ~ \"Negative\",\n      TRUE ~ \"Neutral\"\n    )) %&gt;% arrange(id)\n\n\n\n\n\nSummarize Sentiment by Comment (NRC)\n\n\n\n\n\nCode\nwords_nrc_pn &lt;- words_nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\"))\n\ncomment_sentiment_nrc &lt;- words_nrc_pn %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;%\n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n    is.na(total_score) ~ NA_character_,\n    total_score &gt; 0 ~ \"Positive\",\n    total_score &lt; 0 ~ \"Negative\",\n    TRUE ~ \"Neutral\"\n  )) %&gt;% arrange(id)\n\n\n\nTask 9.1: Compare Positive and Negative Comments\n\nRun comment_sentiment_bing %&gt;% filter(total_score &gt; 0)\n\nRun comment_sentiment_nrc %&gt;% filter(total_score &gt; 0)\n\nWhich comments are positive by Bing? Which by NRC?\n\nTask 9.2: Visualize Bing Results\n\nCreate bar plots to visualize positive and negative word counts per comment\nUse geom_bar() to show counts of positive and negative words\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(comment_sentiment_bing, aes(x = sentiment)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Histogram of Sentiment\", x = \"Sentiment\", y = \"Count\") +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), vjust = -0.5) +\n  theme_minimal()"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-10-comparing-afinn-and-bing",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-10-comparing-afinn-and-bing",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Comparing AFINN and Bing",
    "text": "Step 10: Comparing AFINN and Bing\n\nTask 10.1 Comparing Bing with AFINN\n\nCompare Bing and AFINN results\nCreate a comparison dataframe with both lexicons\nUse left_join() to merge AFINN and Bing results by comment ID\nIdentify comments where Bing and AFINN disagree\n\n\n\n\n\nCode\ncomparison_df2 &lt;- comments %&gt;% \n  left_join(comment_sentiment_bing %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_bing = sentiment) %&gt;%\n  left_join(comment_sentiment %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_afinn = sentiment)\n\ncomparison_df2\n\n# show the comments where Bing and AFINN disagree\n\ncomparison_df2 %&gt;%\n  filter(sentiment_bing != sentiment_afinn | is.na(sentiment_bing) != is.na(sentiment_afinn))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-10-comparing-afinn-and-bing-continued",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-10-comparing-afinn-and-bing-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Comparing AFINN and Bing (continued)",
    "text": "Step 10: Comparing AFINN and Bing (continued)\n\nTask 10.2: Visualize AFINN vs Bing\n\nCreate a bar plot comparing AFINN and Bing sentiments\nUse geom_bar() to show counts of each sentiment per comment\n\n\n\n\n\nCode\n# Reshape the data to long format for plotting\ncomparison_long &lt;- comparison_df2 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing),\n               names_to = \"lexicon\",\n               values_to = \"sentiment\") %&gt;%\n  mutate(lexicon = recode(lexicon, \n                          sentiment_afinn = \"AFINN\", \n                          sentiment_bing = \"Bing\"))\n\n# Create a grouped bar plot to compare sentiment distributions\nggplot(comparison_long, aes(x = sentiment, fill = lexicon)) +\n  geom_bar(position = \"dodge\", alpha = 0.5) +\n  geom_text(stat = \"count\", \n            aes(label = after_stat(count), group = lexicon),\n            position = position_dodge(width = 0.45), \n            vjust = -0.5) +\n  labs(title = \"Comparison of Sentiment Labels: AFINN vs Bing\",\n       x = \"Sentiment\",\n       y = \"Count\",\n       fill = \"Lexicon\") +\n  scale_fill_manual(values = c(\"AFINN\" = \"blue\", \"Bing\" = \"red\")) +\n  theme_minimal()\n\n\n\n\nBing\n\n\n\nCode\nggplot(comment_sentiment_bing, \n       aes(x = id, y = total_score, fill = total_score &gt; 0)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = total_score),\n    vjust = -0.3\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI using Bing lexicon\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"red\", \"blue\"), \n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 9.3: Visualize NRC Emotions\n\nTry visualizing NRC emotions (joy, anger, etc.) using a bar plot\n\nUse geom_bar() to show counts of each emotion per comment\nExample code:\n\n\n\n. . .\n\n\nCode\nwords_nrc_emotions &lt;- words_nrc %&gt;%\n    filter(!sentiment %in% c(\"positive\", \"negative\")) %&gt;%\n    group_by(id, sentiment) %&gt;%\n    summarise(word_count = n(), .groups = \"drop\")\n\nggplot(words_nrc_emotions, aes(x = sentiment, y = word_count, fill = sentiment)) +\n    geom_bar(stat = \"identity\") +\n    facet_wrap(~id, ncol = 6) +\n    labs(title = \"NRC Emotions per Comment\", x = \"Emotion\", y = \"Word Count\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\nTask 9.4: Discuss Lexicon Differences\n\nWhich lexicon (AFINN, Bing, NRC) seems best for your dataset?\n\nConsider factors like vocabulary coverage, sentiment granularity, and performance on your specific comments.\n\n\nTask 9.5: Discuss Nuance and Sarcasm\n\nDoes NRC capture more nuance?\n\nHow do results compare for sarcasm or mixed comments?\nDiscuss how NRC’s emotion-based approach might better capture complex sentiments like sarcasm or mixed emotions compared to AFINN or Bing\n\n\nTask 9.6: Discuss Lexicon Limitations\n\nDiscuss how lexicons like AFINN and Bing may struggle with sarcasm or mixed sentiments\n\ne.g., “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN might score “great” positively, missing the sarcasm"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-11-sentiment-analysis-with-ollama",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-11-sentiment-analysis-with-ollama",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Sentiment Analysis with Ollama",
    "text": "Step 11: Sentiment Analysis with Ollama\n\nObjective: Use Ollama with Llama 3.2:3b to perform sentiment analysis\nOllama runs large language models (LLMs) like Llama 3.2:3b locally\n\noffering nuanced sentiment analysis by understanding context\n\n\n\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\nLoad Ollama\n\n\n\n\n\nCode\nlibrary(ollamar)\n\ntest_connection()\n\nlist_models()\n\n#pull(\"llama3.2:2b\")  # download a model (equivalent bash code: ollama run llama3.2:2b)\n\n\n\ntesting\n\n\n\n\n\nCode\n# generate a response/text based on a prompt; returns an httr2 response by default\nresp &lt;- generate(model=\"llama3.2:3b\", prompt=\"tell me a 50-word story\")\nresp\n\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-11-sentiment-analysis-with-ollama-continued",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-11-sentiment-analysis-with-ollama-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Sentiment Analysis with Ollama (continued)",
    "text": "Step 11: Sentiment Analysis with Ollama (continued)\n\nDefine the function to get sentiment using Ollama\n\n\n\n\nCode\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as Positive, Negative, or Neutral, and respond with only the label:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\n\n\nTask 11.1: Test the Function\n\nRun get_sentiment_ollama(\"AI is amazing and will make education so much better!\")\nWhat sentiment does it return?\n\nTask 11.2: Analyze All Comments\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncomments_ollama &lt;- comments %&gt;% mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-12-compare-with-lexicon-based-approach",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-12-compare-with-lexicon-based-approach",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 12: Compare with lexicon-based approach",
    "text": "Step 12: Compare with lexicon-based approach\n\nCompare with lexicon to see differences\n\nespecially in complex comments (e.g. sarcasm, mixed emotions)\n\nAdd to comment_sentiment and categorize lexicon sentiments\n\n\n\n\nCode\ncomment_sentiment3 &lt;- comparison_df2 %&gt;% \n  left_join(comments_ollama %&gt;% select(id, sentiment_ollama), by = \"id\")\n\n\n\nTask 12.1: Visualize Sentiment Comparison\n\n\n\n\n\nCode\nlibrary(tidyr)\n\ncomparison3 &lt;- comment_sentiment3 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing, sentiment_ollama) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing, sentiment_ollama), \n               names_to = \"method\", \n               values_to = \"sentiment\")\n\ncomparison_counts3 &lt;- comparison3 %&gt;%\n  count(method, sentiment)\n\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Sentiment Distribution Comparison\", \n       x = \"Sentiment\", y = \"Count\") +\n  scale_fill_manual(name = \"Method\",\n                    values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"), \n                    labels = c(\"AFINN (Lexicon)\", \"Bing (Lexicon)\", \"llama3.2:3b (LLM)\")) +\n  scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3)) +\n  theme_minimal()\n\n\n\n\ngeom_text(aes(label = n), position = position_dodge(width = 0.45), hjust= 1., vjust = -0.5) +\n\nlibrary(ggplot2)\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) + geom_bar(stat = “identity”, position = “dodge”, color = “black”, linewidth = 0.2) + geom_text(aes(label = n), position = position_dodge(width = 0.45), vjust = -0.5, size = 3.5, fontface = “bold”) + labs(title = “Comparison of Sentiment Distribution Across Methods”, subtitle = “Counts of Sentiment Categories by Analysis Method”, x = “Sentiment Category”, y = “Number of Comments”, caption = “Data source: Sentiment analysis of comments using AFINN, Bing, and Ollama”) + scale_fill_manual(name = “Sentiment Analysis Method”, values = c(“#1b9e77”, “#d95f02”, “#7570b3”), labels = c(“Lexicon (AFINN)”, “Lexicon (Bing)”, “Ollama (LLM)”)) + scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3), expand = expansion(mult = c(0, 0.1))) + theme_minimal(base_size = 14) + theme( plot.title = element_text(face = “bold”, size = 16, hjust = 0.5), plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 10)), plot.caption = element_text(size = 10, hjust = 0, color = “grey50”), axis.title = element_text(face = “bold”), axis.text = element_text(color = “black”), legend.position = “top”, legend.title = element_text(face = “bold”, size = 12), legend.text = element_text(size = 10), panel.grid.major.x = element_blank(), panel.grid.minor = element_blank(), plot.margin = margin(10, 10, 10, 10) )"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#step-12-compare-with-lexicon-based-approach-continued",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#step-12-compare-with-lexicon-based-approach-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 12: compare with lexicon-based approach (continued)",
    "text": "Step 12: compare with lexicon-based approach (continued)\n\nTask 12.2: Identify Differing Comments\n\nFind comments where sentiment_lexicon != sentiment_ollama\n\n\n\n\n\nCode\ndiffering_comments &lt;- comment_sentiment3 %&gt;%\n  filter(sentiment_afinn != sentiment_ollama | sentiment_bing !=sentiment_ollama | sentiment_afinn != sentiment_ollama) %&gt;%\n  select(id, text, sentiment_afinn, sentiment_bing, sentiment_ollama)\n\nprint(differing_comments)\n\n\n\nTask 12.3: Examine Specific Comments\n\nRun comment_sentiment %&gt;% filter(id %in% c(7, 14, 26))\nWhy might the lexicon and LLM differ for these comments?\n\nDiscuss how LLMs capture context (e.g. sarcasm) better than lexicons\n\n\n\n\n\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!” (sarcasm)\nID 14: “AI is overhyped, it’s not as smart as people think.” (mixed)\nID 26: “AI makes life easier, but it’s a bit scary too.” (mixed)\nDiscussion\n\nWhy do comments like ID 7 (sarcasm) differ?\n\nLexicon may score “great” positively\nbut Llama 3.2:3b detects sarcasm.\n\n\nComments with Significant Differences\n\nThe following comments are likely to show discrepancies between AFINN and Llama 3.2:3b, as highlighted in Task 9.3:\nID 7: “Wow, AI is so great, it’ll solve all our problems… yeah, right!”\n\nAFINN: Positive (due to “great” +3, “solve” +2), ignoring sarcastic “yeah, right.”\nLlama 3.2:3b: Negative, detecting sarcasm through context.\n\nWhy Different: Lexicons score words individually, missing tone; LLMs analyze full sentences.\n\n\nID 14: “AI is overhyped, it’s not as smart as people think.”\n\nAFINN: Neutral or negative (e.g., “overhyped” -2, “smart” +2 may cancel out).\nLlama 3.2:3b: Negative, recognizing critical intent.\nWhy Different: AFINN averages word scores; Llama 3.2:3b captures overall sentiment.\n\nID 26: “AI makes life easier, but it’s a bit scary too.”\n\nAFINN: Neutral (e.g., “easier” +2, “scary” -2 balance out).\nLlama 3.2:3b: Negative or mixed, emphasizing “scary” in context.\n\nWhy Different: Lexicons struggle with mixed emotions; LLMs weigh context.\n\nThese differences spark discussion in Step 9 about lexicon limitations (e.g., missing sarcasm) and LLM strengths (e.g., contextual understanding\nHow do LLMs improve on lexicons for complex sentiments?\n\nWhat are the trade-offs (e.g., LLM complexity vs. lexicon simplicity)?\n\nNote for Facilitators: Ensure Ollama is installed and Llama 3.2:3b is pulled (ollama pull llama3.2:3b)\n\nThis step may take longer due to LLM processing\n\nconsider pre-computing results or running on a subset if time is limited\n\nRun comment_sentiment %&gt;% filter(id == 14). Why might the lexicon and LLM differ\n\nTry the NRC lexicon: Replace afinn with get_sentiments(“nrc”) in Step 6\n\n(adjust for emotion categories) and rerun Steps 6–8\nCompare with Ollama\nHighlight how LLMs capture context (e.g., sarcasm in ID 7) better than lexicons"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#more-discussion",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#more-discussion",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "More Discussion",
    "text": "More Discussion\n\nDoes score match the text’s tone?\nHow does sentiment analysis help understand AI’s societal impact?\nCompanies: Improve AI based on feedback\n\ne.g. if many comments are negative about AI in jobs, they can address concerns\n\nGovernments\n\nAddress fears about AI privacy or jobs\n\nSociety: Highlight excitement for AI in education or healthcare\nWrap-up Questions:\n\nWhat surprised you about the comments?\nHow might sentiment analysis help shape AI’s future in society?\nWhat are the limits of sentiment analysis?\n\n\n\n\ne.g. it might miss sarcasm or cultural nuances"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#takeaway",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#takeaway",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Takeaway",
    "text": "Takeaway\n\nSentiment analysis is an AI tool to understand emotions in text\nYou’ve learned R to\n\nload data\ntokenize\nscore and classify sentiments\nvisualize sentiments"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#resources",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#resources",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science\nTidytext Book\nKaggle - Search “Twitter sentiment” for practice datasets\n\n\n\nFacilitator Notes\n\nPreparation\n\nEnsure R and RStudio are installed. Pre-install packages (tidyverse, tidytext, textdata) to save time\n\nDataset\n\nSmall, fictional dataset keeps it simple. For advanced students, consider a real dataset (e.g., tweets) in a follow-up\n\n\nPacing\n\nEach step is 10–12 minutes, with 24 minutes for Step 8. Skip one practice task per step if running over\nTotal: ~95 minutes hands-on + ~15 minutes discussion = ~110 minutes\n\n\nEngagement\n\nEncourage sharing in discussions to connect to real-world AI issues\n\nTroubleshooting: Assist with RStudio (console vs. script) and package errors"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_v3.html#assignment-real-world-sentiment-analysis-practice",
    "href": "Workshop_Sentiment_Analysis_R_v3.html#assignment-real-world-sentiment-analysis-practice",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Assignment: Real-World Sentiment Analysis Practice",
    "text": "Assignment: Real-World Sentiment Analysis Practice\nAnalyze Social Media Data with Lexicon and LLM Methods\n\nObjective: Practice everything learned using a real-world dataset\nStep 1: Download and Load Data\n\n\n\n\nCode\nlibrary(tidyverse)\n\nreal_comments &lt;- read_csv(\"https://raw.githubusercontent.com/laxmimerit/All-CSV-ML-Data-Files-Download/refs/heads/master/twitter_sentiment.csv\", col_names = c(\"id\",\"entity\", \"sentiment\", \"text\"))\n\nhead(real_comments)\n\n\n\nStep 2: Tokenize and Clean Data\n\n\n\n\n\nCode\nlibrary(tidytext)\nreal_words &lt;- real_comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nStep 3: Compare Lexicons among AFINN, Bing and NRC\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\nbing &lt;- get_sentiments(\"bing\")\nnrc &lt;- get_sentiments(\"nrc\")\n\n# Join and score with AFINN\nreal_sentiment_afinn &lt;- real_words %&gt;%\n  inner_join(afinn, by = \"word\") %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value, na.rm = TRUE))\n\n# Join and score with Bing\nreal_sentiment_bing &lt;- real_words %&gt;%\n  inner_join(bing, by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n# Join and score with NRC (positive/negative)\nreal_sentiment_nrc &lt;- real_words %&gt;%\n  inner_join(nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\")), by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n\n\nStep 4: Visualize Results\n\n\n\n\n\nCode\n# AFINN\nlibrary(ggplot2)\n\nggplot(real_sentiment_afinn, aes(x = id, y = total_score)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"AFINN Sentiment Scores\", x = \"Comment ID\", y = \"Score\") +\n  theme_minimal()\n\n# Bing\nggplot(real_sentiment_bing, aes(x = id)) +\n  geom_bar(aes(y = positive), stat = \"identity\", fill = \"blue\", alpha = 0.5) +\n  geom_bar(aes(y = -negative), stat = \"identity\", fill = \"red\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Positive vs Negative\", x = \"Comment ID\", y = \"Word Count\") +\n  theme_minimal()\n\n\n\nStep 5: (Optional) Use Ollama/LLM for Sentiment\n\n\n\n\n\nCode\n# If you have Ollama and Llama3 installed:\nlibrary(ollamar)\n\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as positive, negative, or neutral, and respond with only the label in lower case:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\nreal_comments &lt;- real_comments %&gt;%\n  mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))\n\n\n\n\n\nStep 6: Compare and Discuss\nCompare lexicon and LLM results\nWhich method best handles sarcasm, mixed emotions, or context?\nWrite a short paragraph (3–5 sentences) on your findings\n\n\n\nDeliverables:\n\nR script with code for all steps\n\nPlots comparing sentiment by method\n\nShort discussion of your results\n\nBonus:\n\nTry analyzing sentiment on comments about another societal topic (e.g. climate change, education, public health)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#overview",
    "href": "Workshop_Sentiment_Analysis_R_student.html#overview",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Overview",
    "text": "Overview\n\nThis 2-hour workshop introduces high school students to sentiment analysis using R in RStudio\nwe will analyze social media comments about AI’s societal impact\n\nlearning basic R commands\nexploring how sentiment analysis reveals public opinions\n\nRoadmap\n\nbackground on sentiment analysis\nhands-on tasks\ndiscussions linking AI to society\n\nLearning Goals:\n\nUnderstand sentiment analysis and how AI can enhance it\nLearn basic R commands for text analysis\nAnalyze sentiments in comments about AI’s societal impact\nDiscuss how sentiment analysis informs AI’s role in society"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#background-sentiment-analysis-and-ai-in-society",
    "href": "Workshop_Sentiment_Analysis_R_student.html#background-sentiment-analysis-and-ai-in-society",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nWhat is Sentiment Analysis?\n\nSentiment analysis is an AI technique that identifies emotions in text\n\ncommonly label them\n\npositive\n\ne.g. I love this!\n\nnegative\n\ne.g. This is scary\n\nneutral\n\ne.g. It’s fine\n\n\n\n\nit is used to understand public opinions/public attitudes\n\ne.g. how people feel about AI in education, jobs, or healthcare"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#background-sentiment-analysis-and-ai-in-society-1",
    "href": "Workshop_Sentiment_Analysis_R_student.html#background-sentiment-analysis-and-ai-in-society-1",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nHow it Works:\n\nLexicon-based\n\nUses a dictionary to assign labels/scores to words\n\ne.g., awesome \\(\\rightarrow\\) positive; worried \\(\\rightarrow\\) negative\n\nWe mainly focus on this approach today for simplicity\n\nMachine Learning-based\n\nTrains machine learning models on labeled data to predict sentiment\n\ne.g., “I love AI!” → positive, “AI is scary” → negative\n\nMore complex but powerful\n\nAdvanced AI\n\nLLM models (like ChatGPT, Deepseek)\nit analyze context for higher accuracy, but they are complex"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#background-sentiment-analysis-and-ai-in-society-2",
    "href": "Workshop_Sentiment_Analysis_R_student.html#background-sentiment-analysis-and-ai-in-society-2",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Background: Sentiment Analysis and AI in Society",
    "text": "Background: Sentiment Analysis and AI in Society\n\nConnection to AI and Society:\n\nSentiment analysis reveals public attitudes toward AI and products, helping understand its societal impact.\n\nExamples:\n\nCompanies analyze tweets to improve their products\nGovernments study comments to address concerns about the satisfaction of its public services\n\nResearchers explore how AI in healthcare is perceived\n\ne.g. trust in AI diagnostics\n\n\n\nBy analyzing text, we learn what excites or worries people, driving further development to benefit society"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-1-introduction-and-setup",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-1-introduction-and-setup",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 1: Introduction and Setup",
    "text": "Step 1: Introduction and Setup\n\nObjective: set up RStudio\nTask 1.1: Open RStudio\n\nOpen RStudio\n\nCreate a new R script: File &gt; New File &gt; R Script\n\nSave as sentiment_workshop.R if needed\n\n\nTask 1.2: Install Packages\n\nRun in the console\n\n\n\n\n\nCode\n# Install necessary packages for sentiment analysis\ninstall.packages(c(\"tidyverse\", \"tidytext\", \"textdata\"))\n\n\n\nnote: tidyverse for data tasks; tidytext for text analysis; textdata for sentiment dictionaries"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-2-loading-tools-and-data",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-2-loading-tools-and-data",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 2: Loading Tools and Data",
    "text": "Step 2: Loading Tools and Data\n\nObjective: Load R packages and a dataset of comments\nDataset\n\nFictional social media comments about AI’s societal impact\n\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(textdata)\n\ncomments &lt;- tibble(\n  id = 1:30,\n  text = c(\n    \"AI is amazing and will make education so much better!\",\n    \"I’m worried AI will take over jobs and leave people unemployed.\",\n    \"AI helps doctors save lives, it’s a game-changer.\",\n    \"I don’t trust AI, it feels creepy and invasive.\",\n    \"AI is okay, but it needs regulation to be safe.\",\n    \"AI in schools is cool, but it’s not perfect.\",\n    \"Wow, AI is so great, it’ll solve all our problems… yeah, right!\",  # Sarcasm\n    \"AI makes healthcare faster and more accurate, love it!\",\n    \"Why does AI know so much about me? It’s unsettling.\",\n    \"AI chatbots are fun to talk to, but sometimes useless.\",\n    \"AI in movies is awesome, makes everything so realistic!\",\n    \"I’m scared AI will control everything one day.\",\n    \"AI helps me study better, it’s like a personal tutor.\",\n    \"AI is overhyped, it’s not as smart as people think.\",  # Mixed\n    \"Using AI for art is creative and inspiring!\",\n    \"AI in cars? No way, I don’t trust self-driving tech.\",\n    \"AI makes my phone so smart, it’s incredible!\",\n    \"I feel like AI is watching me all the time, creepy.\",\n    \"AI in gaming makes battles so epic, I’m hooked!\",\n    \"AI might replace teachers, and that’s not cool.\",\n    \"AI saves time at work, but I miss human interaction.\",\n    \"AI’s fine, but it makes mistakes sometimes.\",  # Neutral\n    \"AI in music creation is a total game-changer!\",\n    \"I’m skeptical about AI making fair decisions.\",\n    \"AI is great, but only if it’s used ethically.\",  # Mixed\n    \"AI makes life easier, but it’s a bit scary too.\",  # Mixed\n    \"AI in agriculture boosts crops, amazing stuff!\",\n    \"I don’t get why everyone loves AI so much.\",  # Negative\n    \"AI tutors are helpful, but they don’t replace real teachers.\",\n    \"AI sounds cool, but I’m not sure it’s safe.\"  # Mixed\n  )\n)\n\n\n\nTask 2.1: Run the Code\n\nRun the code (highlight and press Ctrl+Enter)\n\nTask 2.2: View the Data\n\nprint(comments)\n\nTask 2.3: View comments\n\nRun view(comments) in the console\n\nHow many comments are there?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-3-exploring-the-dataset",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-3-exploring-the-dataset",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 3: Exploring the Dataset",
    "text": "Step 3: Exploring the Dataset\n\nObjective: Understand the dataset’s structure\n\n\n\n\nCode\ncolnames(comments)\nnrow(comments)\n\ncomments$text[1]\n\n\n\nTask 3.1: View Specific Comments\n\nRun ncol(comments) to check how many columns are in the dataset\n\nTask 3.2: View Specific Comments\n\nRun comments$text[4] to see the fourth comment"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-4-splitting-text-into-words",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-4-splitting-text-into-words",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 4: Splitting Text into Words",
    "text": "Step 4: Splitting Text into Words\n\nObjective: Learn tokenization to break text into words\nTokenization splits sentences into words\n\ne.g. “AI is cool” \\(\\rightarrow\\) {“AI,” “is,” “cool”}\nWords are the building blocks for (most) sentiment analysis\n\n\n\n\n\nCode\nwords &lt;- comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nTask 4.1: View Words\n\nprint(words)\n\nTask 4.2: How many words are there?\n\nRun nrow(words)\n\nTask 4.3: View First 5 Words\n\nRun head(words, 5)\n\nTask 4.4: How many unique words are there?\n\nRun n_distinct(words$word)\n\nTask 4.5: View Most Common Words\n\nRun words %&gt;% count(word, sort = TRUE) %&gt;% head(10)\n\nTask 4.6: How many times does “better” appear?\n\nRun words %&gt;% filter(word == \"better\")"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-5-exploring-sentiment-lexicons",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-5-exploring-sentiment-lexicons",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons",
    "text": "Step 5: Exploring Sentiment Lexicons\n\nObjective: Understand how lexicons assign sentiment scores\nA lexicon is a dictionary scoring words’ emotions\n\nAFINN: -5 to +5\n\ne.g. “Happy” = +3, “scary” = -2\n\nAlternatives\n\nBing:\n\na binary classification: positive/negative\n\nNRC:\n\nemotion-based (e.g. joy, anger) and positive/negative classifications\n\n\n\nHere, AI uses lexicons to quantify feelings in text"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-5-exploring-sentiment-lexicons-continued",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-5-exploring-sentiment-lexicons-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 5: Exploring Sentiment Lexicons (continued)",
    "text": "Step 5: Exploring Sentiment Lexicons (continued)\n\nWe will use the AFINN lexicon, which assigns scores to words based on their sentiment\n\nPositive words have positive scores, negative words have negative scores\nNeutral words have a score of 0\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\n\n\n\nTask 5.1: View Lexicon\n\nRun: head(afinn, 10)\n\nTask 5.2: Check Scores for Specific Words\n\nRun: afinn %&gt;% filter(word == \"trust\")\nWhat’s its score?\n\nRun: afinn %&gt;% filter(word == \"bad\")\nGuess the score for “awesome”\nList two words you think are negative"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-6-scoring-words-for-sentiment",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-6-scoring-words-for-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 6: Scoring Words for Sentiment",
    "text": "Step 6: Scoring Words for Sentiment\n\nObjective: Assign sentiment scores to words\nMatch dataset words to AFINN lexicon scores\n\nOnly words in the lexicon get scores\n\n\n\n\n\nCode\nsentiment_scores &lt;- words %&gt;%\n  inner_join(afinn, by = \"word\")\n\n\n\nTask 6.1: View Scores\n\nRun: print(sentiment_scores)\nList one positive and one negative word\n\nTask 6.2: Count Negative Words\n\nRun: sentiment_scores %&gt;% filter(value &lt; 0)\n\nTask 6.3: Count Positive Words\n\nRun: sentiment_scores %&gt;% filter(value &gt; 0)"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-7-summarizing-comment-sentiment",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-7-summarizing-comment-sentiment",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 7: Summarizing Comment Sentiment",
    "text": "Step 7: Summarizing Comment Sentiment\n\nObjective: Calculate total sentiment for each comment\nSum word scores per comment to get its overall sentiment\n\nPositive total = Sum of positive comments (scores)\nNegative total = Sun of negative comments (scores)\nsentiment = positive total - negative total\n\n\n\n\n\nCode\ncomment_sentiment &lt;- sentiment_scores %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value)) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  arrange(id)\n\n\n\nTask 7.1: View Results\n\nRun print(comment_sentiment)\nWhich comment has the lowest score?\n\nTask 7.2: Sort by Total Score\n\nRun comment_sentiment %&gt;% arrange(desc(total_score))\nWhich is most positive?\n\nTask 7.3: Check Comment 18’s Score\n\nRead comment 18’s text and score\nDo they match?\n\nTask 7.4: Check Neutral Comments\n\nRun comment_sentiment %&gt;% filter(total_score == 0)\nAny neutral comments?\n\nTask 7.5: Add Sentiment Labels\n\nRun the following code\n\n\n\n\n\n\nCode\ncomment_sentiment &lt;- comment_sentiment %&gt;% \n  mutate(sentiment = case_when(is.na(total_score) ~ NA_character_,\n                               total_score &gt; 0 ~ \"Positive\", \n                               total_score &lt; 0 ~ \"Negative\",\n                               TRUE ~ \"Neutral\"))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-8-visualizing-and-discussing-results",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-8-visualizing-and-discussing-results",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 8: Visualizing and Discussing Results",
    "text": "Step 8: Visualizing and Discussing Results\n\nObjective: Visualize sentiment and discuss AI’s societal impact\nCreate a bar plot to see positive/negative sentiments\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = id, y = total_score, fill = sentiment)) +\n  geom_bar(stat = \"identity\", na.rm = TRUE) +\n  geom_text(\n    data = filter(comment_sentiment, !is.na(total_score)),\n    aes(\n      label = total_score,\n      vjust = case_when(\n        total_score &gt;= 0 ~ -0.3,\n        total_score &lt; 0  ~ 1.3\n      )\n    )\n  ) +\n  geom_text(\n    data = filter(comment_sentiment, is.na(total_score)),\n    aes(y = 0, label = \"NA\"),\n    vjust = -0.3,\n    color = \"black\",\n    size = 2\n  ) +\n  labs(title = \"Sentiment Scores of Comments about AI usign AFINN\",\n       x = \"Comment ID\", y = \"Sentiment Score\") +\n  scale_fill_manual(\n    name = \"Sentiment\",\n    values = c(\"Negative\" = \"red\", \"Positive\" = \"blue\"),\n    labels = c(\"Negative\", \"Positive\"),\n    na.translate = FALSE # don't show NA in the legend\n  ) +\n  scale_x_continuous(breaks = seq(2, 30, by = 2)) +\n  theme_minimal()\n\n\n\nTask 8.1: Create Plot\n\nRun the plot code\n\nIdentify: Which comments are blue (positive)? Red (negative)?\n\nTask 8.2: Plot the density of sentiment distribution\n\nCreate a density plot of sentiment scores\nUse geom_density() to visualize the distribution\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = total_score, fill = sentiment)) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Density Plot of Comment Sentiment Scores\",\n       x = \"Sentiment Score\", y = \"Density\") +\n  theme_minimal()\n\n\n\nTask 8.3: Plot the histogram of sentiment label\n\nCreate a histogram of sentiment labels\nUse geom_bar() to visualize counts of each sentiment label\n\n\n\n\n\n\nCode\nggplot(comment_sentiment, aes(x = sentiment, fill = sentiment)) +\n  geom_bar() +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -0.5\n  ) +\n  labs(title = \"Histogram of Sentiment Labels\",\n       x = \"Sentiment\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-9-exploring-other-lexicon",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-9-exploring-other-lexicon",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon",
    "text": "Step 9: Exploring other Lexicon\nObjective: Explore Bing and NRC sentiment lexicons as alternatives to AFINN\n\nWhat are Bing and NRC? (recap)\n\nBing Lexicon:\n\nClassifies words as “positive” or “negative” only (no score)\n\nNRC Lexicon:\n\nAssigns words to emotions (joy, anger, fear, etc.) and positive/negative\n\n\nTasks: Load Bing and NRC Lexicons\n\n\n\n\nCode\nlibrary(tidytext)\n\nbing &lt;- get_sentiments(\"bing\")\n\nnrc &lt;- get_sentiments(\"nrc\")\n\n\n\nTask: View Lexicon Examples\n\n\n\n\n\nCode\nhead(bing, 10)\n\nhead(nrc, 10)\n\n\n\nTask: Join Words with Bing\n\n\n\n\n\nCode\nwords_bing &lt;- words %&gt;%\n  inner_join(bing, by = \"word\")\n\nwords_nrc &lt;- words %&gt;%\n  inner_join(nrc, by = \"word\")"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-9-exploring-other-lexicon-continued",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-9-exploring-other-lexicon-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 9: Exploring other Lexicon (continued)",
    "text": "Step 9: Exploring other Lexicon (continued)\n\nSummarize Sentiment by Comment (Bing)\n\n\n\n\nCode\ncomment_sentiment_bing &lt;- words_bing %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;% \n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n      is.na(total_score) ~ NA_character_,\n      total_score &gt; 0 ~ \"Positive\",\n      total_score &lt; 0 ~ \"Negative\",\n      TRUE ~ \"Neutral\"\n    )) %&gt;% arrange(id)\n\n\n\n\n\nSummarize Sentiment by Comment (NRC)\n\n\n\n\n\nCode\nwords_nrc_pn &lt;- words_nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\"))\n\ncomment_sentiment_nrc &lt;- words_nrc_pn %&gt;%\n  group_by(id, sentiment) %&gt;%\n  summarise(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment, values_from = word_count, values_fill = 0) %&gt;%\n  right_join(comments, by = \"id\") %&gt;%\n  mutate(total_score = positive - negative) %&gt;%\n  mutate(sentiment = case_when(\n    is.na(total_score) ~ NA_character_,\n    total_score &gt; 0 ~ \"Positive\",\n    total_score &lt; 0 ~ \"Negative\",\n    TRUE ~ \"Neutral\"\n  )) %&gt;% arrange(id)\n\n\n\nTask 9.1: Compare Positive and Negative Comments\n\nRun comment_sentiment_bing %&gt;% filter(total_score &gt; 0)\n\nRun comment_sentiment_nrc %&gt;% filter(total_score &gt; 0)\n\nWhich comments are positive by Bing? Which by NRC?\n\nTask 9.2: Visualize Bing Results\n\nCreate bar plots to visualize positive and negative word counts per comment\nUse geom_bar() to show counts of positive and negative words\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(comment_sentiment_bing, aes(x = sentiment)) +\n  geom_bar(fill = \"blue\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Histogram of Sentiment\", x = \"Sentiment\", y = \"Count\") +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), vjust = -0.5) +\n  theme_minimal()"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-10-comparing-afinn-and-bing",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-10-comparing-afinn-and-bing",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Comparing AFINN and Bing",
    "text": "Step 10: Comparing AFINN and Bing\n\nTask 10.1 Comparing Bing with AFINN\n\nCompare Bing and AFINN results\nCreate a comparison dataframe with both lexicons\nUse left_join() to merge AFINN and Bing results by comment ID\nIdentify comments where Bing and AFINN disagree\n\n\n\n\n\nCode\ncomparison_df2 &lt;- comments %&gt;% \n  left_join(comment_sentiment_bing %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_bing = sentiment) %&gt;%\n  left_join(comment_sentiment %&gt;% select(id, sentiment), by = \"id\") %&gt;%\n  rename(sentiment_afinn = sentiment)\n\ncomparison_df2\n\n# show the comments where Bing and AFINN disagree\n\ncomparison_df2 %&gt;%\n  filter(sentiment_bing != sentiment_afinn | is.na(sentiment_bing) != is.na(sentiment_afinn))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-10-comparing-afinn-and-bing-continued",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-10-comparing-afinn-and-bing-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 10: Comparing AFINN and Bing (continued)",
    "text": "Step 10: Comparing AFINN and Bing (continued)\n\nTask 10.2: Visualize AFINN vs Bing\n\nCreate a bar plot comparing AFINN and Bing sentiments\nUse geom_bar() to show counts of each sentiment per comment\n\n\n\n\n\nCode\n# Reshape the data to long format for plotting\ncomparison_long &lt;- comparison_df2 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing),\n               names_to = \"lexicon\",\n               values_to = \"sentiment\") %&gt;%\n  mutate(lexicon = recode(lexicon, \n                          sentiment_afinn = \"AFINN\", \n                          sentiment_bing = \"Bing\"))\n\n# Create a grouped bar plot to compare sentiment distributions\nggplot(comparison_long, aes(x = sentiment, fill = lexicon)) +\n  geom_bar(position = \"dodge\", alpha = 0.5) +\n  geom_text(stat = \"count\", \n            aes(label = after_stat(count), group = lexicon),\n            position = position_dodge(width = 0.45), \n            vjust = -0.5) +\n  labs(title = \"Comparison of Sentiment Labels: AFINN vs Bing\",\n       x = \"Sentiment\",\n       y = \"Count\",\n       fill = \"Lexicon\") +\n  scale_fill_manual(values = c(\"AFINN\" = \"blue\", \"Bing\" = \"red\")) +\n  theme_minimal()"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-11-sentiment-analysis-with-ollama",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-11-sentiment-analysis-with-ollama",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Sentiment Analysis with Ollama",
    "text": "Step 11: Sentiment Analysis with Ollama\n\nObjective: Use Ollama with Llama 3.2:3b to perform sentiment analysis\nOllama runs large language models (LLMs) like Llama 3.2:3b locally\n\noffering nuanced sentiment analysis by understanding context\n\n\n\n\n\nCode\ninstall.packages(\"ollamar\")\n\n\n\nLoad Ollama\n\n\n\n\n\nCode\nlibrary(ollamar)\n\ntest_connection()\n\nlist_models()\n\n#pull(\"llama3.2:2b\")  # download a model (equivalent bash code: ollama run llama3.2:2b)\n\n\n\ntesting\n\n\n\n\n\nCode\n# generate a response/text based on a prompt; returns an httr2 response by default\nresp &lt;- generate(model=\"llama3.2:3b\", prompt=\"tell me a 50-word story\")\nresp\n\n# get just the text from the response object\nresp_process(resp, \"text\")\n\n# get the text as a tibble dataframe\nresp_process(resp, \"df\")"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-11-sentiment-analysis-with-ollama-continued",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-11-sentiment-analysis-with-ollama-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 11: Sentiment Analysis with Ollama (continued)",
    "text": "Step 11: Sentiment Analysis with Ollama (continued)\n\nDefine the function to get sentiment using Ollama\n\n\n\n\nCode\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as Positive, Negative, or Neutral, and respond with only the label:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\n\n\nTask 11.1: Test the Function\n\nRun get_sentiment_ollama(\"AI is amazing and will make education so much better!\")\nWhat sentiment does it return?\n\nTask 11.2: Analyze All Comments\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncomments_ollama &lt;- comments %&gt;% mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-12-compare-with-lexicon-based-approach",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-12-compare-with-lexicon-based-approach",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 12: Compare with lexicon-based approach",
    "text": "Step 12: Compare with lexicon-based approach\n\nCompare with lexicon to see differences\n\nespecially in complex comments (e.g. sarcasm, mixed emotions)\n\nAdd to comment_sentiment and categorize lexicon sentiments\n\n\n\n\nCode\ncomment_sentiment3 &lt;- comparison_df2 %&gt;% \n  left_join(comments_ollama %&gt;% select(id, sentiment_ollama), by = \"id\")\n\n\n\nTask 12.1: Visualize Sentiment Comparison\n\n\n\n\n\nCode\nlibrary(tidyr)\n\ncomparison3 &lt;- comment_sentiment3 %&gt;%\n  select(id, sentiment_afinn, sentiment_bing, sentiment_ollama) %&gt;%\n  pivot_longer(cols = c(sentiment_afinn, sentiment_bing, sentiment_ollama), \n               names_to = \"method\", \n               values_to = \"sentiment\")\n\ncomparison_counts3 &lt;- comparison3 %&gt;%\n  count(method, sentiment)\n\nggplot(comparison_counts3, aes(x = sentiment, y = n, fill = method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Sentiment Distribution Comparison\", \n       x = \"Sentiment\", y = \"Count\") +\n  scale_fill_manual(name = \"Method\",\n                    values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"), \n                    labels = c(\"AFINN (Lexicon)\", \"Bing (Lexicon)\", \"llama3.2:3b (LLM)\")) +\n  scale_y_continuous(breaks = seq(0, max(comparison_counts3$n, na.rm = TRUE) + 3, by = 3)) +\n  theme_minimal()"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#step-12-compare-with-lexicon-based-approach-continued",
    "href": "Workshop_Sentiment_Analysis_R_student.html#step-12-compare-with-lexicon-based-approach-continued",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Step 12: compare with lexicon-based approach (continued)",
    "text": "Step 12: compare with lexicon-based approach (continued)\n\nTask 12.2: Identify Differing Comments\n\nFind comments where sentiment_lexicon != sentiment_ollama\n\n\n\n\n\nCode\ndiffering_comments &lt;- comment_sentiment3 %&gt;%\n  filter(sentiment_afinn != sentiment_ollama | sentiment_bing !=sentiment_ollama | sentiment_afinn != sentiment_ollama) %&gt;%\n  select(id, text, sentiment_afinn, sentiment_bing, sentiment_ollama)\n\nprint(differing_comments)\n\n\n\nTask 12.3: Examine Specific Comments\n\nRun comment_sentiment %&gt;% filter(id %in% c(7, 14, 26))\nWhy might the lexicon and LLM differ for these comments?\n\nDiscuss how LLMs capture context (e.g. sarcasm) better than lexicons"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#more-discussion",
    "href": "Workshop_Sentiment_Analysis_R_student.html#more-discussion",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "More Discussion",
    "text": "More Discussion\n\nDoes score match the text’s tone?\nHow does sentiment analysis help understand AI’s societal impact?\nCompanies: Improve AI based on feedback\n\ne.g. if many comments are negative about AI in jobs, they can address concerns\n\nGovernments\n\nAddress fears about AI privacy or jobs\n\nSociety: Highlight excitement for AI in education or healthcare\nWrap-up Questions:\n\nWhat surprised you about the comments?\nHow might sentiment analysis help shape AI’s future in society?\nWhat are the limits of sentiment analysis?"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#takeaway",
    "href": "Workshop_Sentiment_Analysis_R_student.html#takeaway",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Takeaway",
    "text": "Takeaway\n\nSentiment analysis is an AI tool to understand emotions in text\nYou’ve learned R to\n\nload data\ntokenize\nscore and classify sentiments\nvisualize sentiments"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#resources",
    "href": "Workshop_Sentiment_Analysis_R_student.html#resources",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science\nTidytext Book\nKaggle - Search “Twitter sentiment” for practice datasets"
  },
  {
    "objectID": "Workshop_Sentiment_Analysis_R_student.html#assignment-real-world-sentiment-analysis-practice",
    "href": "Workshop_Sentiment_Analysis_R_student.html#assignment-real-world-sentiment-analysis-practice",
    "title": "Hands-On Introduction to Sentiment Analysis with R",
    "section": "Assignment: Real-World Sentiment Analysis Practice",
    "text": "Assignment: Real-World Sentiment Analysis Practice\nAnalyze Social Media Data with Lexicon and LLM Methods\n\nObjective: Practice everything learned using a real-world dataset\nStep 1: Download and Load Data\n\n\n\n\nCode\nlibrary(tidyverse)\n\nreal_comments &lt;- read_csv(\"https://raw.githubusercontent.com/laxmimerit/All-CSV-ML-Data-Files-Download/refs/heads/master/twitter_sentiment.csv\", col_names = c(\"id\",\"entity\", \"sentiment\", \"text\"))\n\nhead(real_comments)\n\n\n\nStep 2: Tokenize and Clean Data\n\n\n\n\n\nCode\nlibrary(tidytext)\nreal_words &lt;- real_comments %&gt;%\n  unnest_tokens(word, text)\n\n\n\nStep 3: Compare Lexicons among AFINN, Bing and NRC\n\n\n\n\n\nCode\nafinn &lt;- get_sentiments(\"afinn\")\nbing &lt;- get_sentiments(\"bing\")\nnrc &lt;- get_sentiments(\"nrc\")\n\n# Join and score with AFINN\nreal_sentiment_afinn &lt;- real_words %&gt;%\n  inner_join(afinn, by = \"word\") %&gt;%\n  group_by(id) %&gt;%\n  summarize(total_score = sum(value, na.rm = TRUE))\n\n# Join and score with Bing\nreal_sentiment_bing &lt;- real_words %&gt;%\n  inner_join(bing, by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n# Join and score with NRC (positive/negative)\nreal_sentiment_nrc &lt;- real_words %&gt;%\n  inner_join(nrc %&gt;% filter(sentiment %in% c(\"positive\", \"negative\")), by = \"word\") %&gt;%\n  group_by(id, sentiment.y) %&gt;%\n  summarize(word_count = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = sentiment.y, values_from = word_count, values_fill = 0)\n\n\n\nStep 4: Visualize Results\n\n\n\n\n\nCode\n# AFINN\nlibrary(ggplot2)\n\nggplot(real_sentiment_afinn, aes(x = id, y = total_score)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"AFINN Sentiment Scores\", x = \"Comment ID\", y = \"Score\") +\n  theme_minimal()\n\n# Bing\nggplot(real_sentiment_bing, aes(x = id)) +\n  geom_bar(aes(y = positive), stat = \"identity\", fill = \"blue\", alpha = 0.5) +\n  geom_bar(aes(y = -negative), stat = \"identity\", fill = \"red\", alpha = 0.5) +\n  labs(title = \"Bing Lexicon: Positive vs Negative\", x = \"Comment ID\", y = \"Word Count\") +\n  theme_minimal()\n\n\n\nStep 5: (Optional) Use Ollama/LLM for Sentiment\n\n\n\n\n\nCode\n# If you have Ollama and Llama3 installed:\nlibrary(ollamar)\n\nget_sentiment_ollama &lt;- function(text) {\n  prompt &lt;- paste(\"Classify the sentiment of the following text as positive, negative, or neutral, and respond with only the label in lower case:\", text)\n  response &lt;- generate(model = \"llama3.2:3b\", prompt = prompt, output=\"text\")\n  return(response)\n}\n\nreal_comments &lt;- real_comments %&gt;%\n  mutate(sentiment_ollama = map_chr(text, get_sentiment_ollama))\n\n\n\n\n\nStep 6: Compare and Discuss\nCompare lexicon and LLM results\nWhich method best handles sarcasm, mixed emotions, or context?\nWrite a short paragraph (3–5 sentences) on your findings"
  },
  {
    "objectID": "slide_link2.html",
    "href": "slide_link2.html",
    "title": "slides",
    "section": "",
    "text": "Hello, please feel free to download slides for the HKU Social Science Summer Programme:\n\n\n\n\n\n\nSlides\n\n\n\n\nSentiment Analysis with R\nRecommender Systems with R"
  }
]