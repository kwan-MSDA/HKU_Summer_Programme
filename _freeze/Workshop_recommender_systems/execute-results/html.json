{
  "hash": "a548c3e052710576c5918e09c8a65cb5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Introduction to Recommender Systems with R\"\nsubtitle: \"Theme: AI and Society\"\nauthor:\n    - name: KT Wong\nemail: \"kwanto@hku.hk\"\naffiliation: \"Faculty of Social Sciences, HKU\"\n\n#abstract: |\n #     The materials in this topic are drawn from @Chetty2020\n      \ndate: today\n\n#bibliography: reference_bigdata.bib\n\nformat:\n  revealjs:\n    theme: clean_42_rb.scss\n    #multiplex: True\n    chalkboard: True\n    slide-number: c/t\n    preview-links: auto\n    margin: 0.03\n    height: 1080\n    width: 1920\n    max-scale: 2\n    smaller: false\n    scrollable: true\n    incremental: TRUE\n    template-partials:\n       - title-slide.html\n    controls: true\n    code-fold: true\n    code-overflow: scroll\n    code-line-numbers: true\n    fig-asp: 0.618\n    \ninclude-in-header:\n  text: |\n      <style>\n      #title-slide .abstract {\n        font-size: 28px;\n        color: #F15D50;\n      }\n      </style>\n      \nengine: knitr\n\nknitr:\n  opts_chunk:\n    echo: false\n    message: false\n    warning: false\n    error: false\n    eval: false\n    \nfig-cap-location: bottom\nfig-width: 12\n#fig-height: 5\n#fig-dpi: 300\nlightbox: True\n---\n\n# Main Theme: **AI and Society** {visibility=\"uncounted\"}\n\n**Hands-On Introduction to Recommender Systems with R**  \n**Audience:** High school students new to R  \n**Duration:** 2 hours  \n**Environment:** R and RStudio  \n\n::: notes\n\n+ Welcome students, spark excitement about recommendation systems in everyday life (e.g., Netflix, Spotify).\n\n+ Emphasize \"AI and Society\" theme: how recommendations shape our choices.\n\n+ Ensure R, RStudio, and packages (`recommenderlab`, `tidyverse`, `proxy`, `topicmodels) are pre-installed.\n\n+ Keep energy high, connect to students’ experiences (e.g., AI suggesting videos).\n\n:::\n\n## Why Recommender Systems Matter\n\n+ **Why Interesting?**\n  + Power apps you use daily\n    + Netflix suggests shows\n    + TikTok picks videos\n    + Amazon recommends products\n  + Personalize experiences, making life easier and fun\n    + e.g. Spotify suggests songs you love based on your listening habits\n\n## Why Recommender System Matter\n\n+ **Why Important?**\n  + Drive business and innovation\n    + Companies use recommendations to improve user satisfaction\n  + Shape society\n    + Influence what you watch, buy, or learn\n    + e.g. AI study apps suggest further references to help you learn better\n\n## Why Recommender System Matter\n\n+ **Societal Impacts:**\n  + **Benefits**\n    + Discover new content, save time \n      + e.g. finding a great travel app\n  + **Challenges**\n    + Privacy concerns \n      + e.g. tracking your likes\n    + filter bubbles \n      + e.g. biased news feeds\n      \n+ Today: Build our own (toy) recommender system in R to see how it works!\n\n::: notes\n\n- **Content (6 min):** Engage with examples: \"Ever wonder how Netflix knows you’d love that new show?\"\n\n- Highlight excitement: \"You’ll create AI suggestions today!\" and importance: \"Recommendations affect society.\"\n\n- Discuss pros (personalization) and cons (privacy). Ask: \"What’s a recommendation you got recently?\"\n\n- **Presenter Tips:** Use visuals (e.g., show Netflix/TikTok screenshots if possible). Keep high energy to set tone.\n\n- Transition: \"Let’s dive into building a recommender for AI products!\"\n\n- Connect to real life: \"How does TikTok know what videos you like?\"\n\n- Highlight pros (personalization) and cons (privacy, bias).\n\n- Set stage for discussions: How do recommendations affect society?\n\n- Keep brief to move to hands-on tasks\n\n:::\n\n\n## Overview\n\n+ this workshop introduces **recommender systems** using R in RStudio\n\n+ Task: Analyze user ratings for AI-related products (e.g. apps, tools)\n  + Learn basic R commands\n  + Build a recommender system --- explore the underlying mechanism\n\n+ Roadmap\n  + Background on Recommender Systems\n  + Hands-on tasks\n  + Compare collaborative and content-based methods\n  + Discuss AI’s societal role\n\n+ **Learning Goals:**\n  + Understand recommender systems in AI\n  + Use R for building and evaluating recommendations\n  + Connect findings to societal impacts\n\n::: notes\n\n- **Prerequisites:** No R experience needed. Laptops with R, RStudio, packages.\n\n- **Materials:** Dataset in code (user ratings for AI products).\n\n- Highlight fun of personalizing recommendations and societal relevance (e.g., shopping apps).\n\n- Keep intro brief to dive into hands-on tasks.\n\n:::\n\n## Background: Recommender Systems and AI in Society\n\n+ **What are Recommender Systems?**\n  + AI systems suggest items based on **user preferences**\n    + e.g., Netflix movies, Amazon products, Spotify songs\n  + Types:\n    + **Collaborative Filtering**: Uses user behavior (e.g. ratings)\n    + **Content-Based**: Uses item features (e.g. app categories)\n    + **Factor Models**: Finds hidden patterns in ratings\n    + **LDA**: Uses topic modeling to group items by themes\n  + Used in apps, shopping, social media\n\n+ **How They Work:**\n  + **Collaborative**: Finds similar users/items (e.g. \"People like you liked this app\")\n  + **Content-Based**: Matches item features to user interests\n  + **Factor Models**: Breaks ratings into latent factors (e.g. user preferences for education apps)\n  + **LDA**: Identifies topics in items (e.g. StudyApp is \"educational\")\n\n+ e.g. If you buy a product (book), get similar product (book) suggestions\n\n+ Focus on the working of collaborative filtering, introduce content-based briefly when time allows\n\n::: notes\n\n- Explain simply: \"Like a friend suggesting movies you’d love.\"\n\n- Relate to students: \"Ever get YouTube video recommendations?\"\n\n- Focus on collaborative filtering today, introduce content-based briefly.\n\n- Mention we’ll compare both to see differences.\n\n- Transition to hands-on: \"Let’s build recommenders for AI products!\"\n\n:::\n\n# Hands-on Workshop {visibility=\"uncounted\"}\n\n## Step 1: Introduction and Setup \n\n**Objective:** Set up RStudio\n\n+ **Task 1.1: Open RStudio**\n  + Open RStudio, create new R script: `File > New File > R Script`\n\n+ **Task 1.2: Install Packages**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"recommenderlab\", \"proxy\", \"topicmodels\", \"text2vec\"))\n```\n:::\n\n\n::: notes\n\n+ 8 minutes\n\n+ Content: Explain recommendation systems: \"AI suggests things you might like.\" Introduce RStudio (console, script).\n\n+ Presenter Tips: Assist with RStudio setup. Ensure packages are pre-installed to save time.\n\n+ Practice (2 min): Run print(\"Hello, I’m learning R!\") in console. Guess what an AI app recommendation might look like.\n\n+ Discussion (1 min): Why are recommendations useful? Example: AI study apps.\n\n+ Keep pace brisk to fit 2 hours\n\n:::\n\n## Step 2: Loading Tools and Data\n\n**Objective**: Load packages and dataset\n\n+ Dataset: 30 users rating 10 AI products (1–5 scale)\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(recommenderlab)\nlibrary(proxy)\n\n\nratings <- matrix(sample(c(NA, 1:5), 300, replace = TRUE, prob = c(0.7, 0.1, 0.1, 0.1, 0.05, 0.05)), \n                 nrow = 30, ncol = 10)\n\ncolnames(ratings) <- c(\"StudyApp\", \"ChatBot\", \"ArtGen\", \"CodeTool\", \"VoiceAI\", \n                       \"HealthAI\", \"GameAI\", \"MusicAI\", \"CarAI\", \"TutorAI\")\n\nrownames(ratings) <- paste0(\"User\", 1:30)\n\nratings <- as(ratings, \"realRatingMatrix\")\n```\n:::\n\n\n+ **Task 2.1: Run code (Ctrl+Enter)**\n\n+ **Task 2.2: take a look at the ratings matrix** \n    + Run `View(as(ratings, \"matrix\"))`\n\n\n::: notes\n\n+ Content: Introduce dataset: \"Ratings for AI products like study apps.\"\n\n+ Presenter Tips: Show ratings in RStudio (View(as(ratings, \"matrix\"))). Explain NA means no rating.\n\n+ Practice (2 min): Run dim(ratings). How many users/products?\n\n+ Discussion (1 min): How do ratings reflect AI preferences? Example: AI in gaming.\n\n+ Assist with package errors; move quickly\n\n:::\n\n## Step 3: Exploring the Dataset\n\n**Objective**: Understand dataset structure\n\n+ the dateset is a matrix of user ratings for AI products\n\n+ Task 2.3: Check dimensions and first few ratings\n  + Run `dim(ratings)`\n  + Run `colnames(ratings)`\n  \n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(ratings)\ncolnames(ratings)\n```\n:::\n\n\n+ **Task 3.1: look at the subset of the matrix**\n  + Run `ratings@data[1:3, 1:3]`\n\n+ **Task 3.2: Which user rated most?**\n  + Run `rowSums(ratings@data, na.rm = TRUE)[1:5]`\n  \n::: notes\n\n+ 7 minutes\n\n+ Content: Explain: \"Matrix shows user preferences for AI tools.\"\n\n+ Presenter Tips: Show first few ratings. Highlight sparsity (many NAs).\n\n+ Practice (2 min): Run rowSums(ratings@data, na.rm = TRUE)[1:5]. Which user rated most?\n\n+ Discussion (1 min): Why explore ratings? How do they show AI’s role in society?\n\n+ Keep tasks simple to stay on track\n\n:::\n\n## Step 4: Building a Collaborative Filtering Model \n\n**Objective**: Create user-based collaborative filtering model\n\n+ Recommends products based on similar users’ ratings\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecommender_ubcf <- Recommender(ratings, method = \"UBCF\", \n                               param = list(normalize = \"center\", \n                                            method = \"cosine\"))\n```\n:::\n\n\n+ **Task 4.1: Run code**\n\n+ **Task 4.2: Check model details**\n  + Run `getModel(recommender)$description`\n\n::: notes\n\n+ 10 minutes\n\n+ Content\n  + Explain: \"Finds users with similar ratings to suggest products.\"\n  + Presenter Tips\n    + Describe UBCF: \"Like suggesting a game because your friend likes it.\"\n  + Practice (3 min): Check model details. Guess what StudyApp’s rating might be for User1.\n\n+ Discussion (2 min): \n  + How does collaborative filtering help users? Example: App suggestions.\n\n+ Ensure code runs smoothly\n\n:::\n\n## Step 5: Generating Recommendations \n\n**Objective**: Predict recommendations for users\n\n+ Suggest top AI products for users\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions_ubcf <- predict(recommender_ubcf, ratings[1:5], n = 2)\n\npred_list_ubcf <- as(predictions_ubcf, \"list\")\n```\n:::\n\n\n\n+ **Task 5.1: see User1’s recommendations**\n  + Run `pred_list[[1]]`\n\n+ **Task 5.2: Check recommendations for User2**\n  + Run `pred_list[[2]]`\n\n\n::: notes\n\n+ 10 minutes\n\n+ Content\n  + Explain: \"Predicts products users might like.\"\n  + Presenter Tips: Show recommendations \n    + e.g., User1 gets StudyApp)\n    + Relate to Netflix\n\n+ Practice (3 min)\n  + Note User1’s top recommendation. Why might it fit?\n\n+ Discussion (2 min)\n  + How do recommendations improve AI app use?\n    + Example: Study tools.\n\n+ Assist with output interpretation\n\n:::\n\n## Step 6: Content-Based Approach\n\n**Objective**: Compare with content-based filtering\n\n+ Use product features\n  + e.g., categories: Education, Health\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Product features (simplified: 1 = has feature, 0 = doesn’t)\n\nfeatures <- matrix(c(\n  1, 0, 0, 1, 0, 0, 0, 0, 0, 1,  # StudyApp: Education, Coding\n  0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  # ChatBot: Interaction\n  0, 0, 1, 0, 0, 0, 1, 1, 0, 0,  # ArtGen: Creativity, Gaming\n  1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  # CodeTool: Education, Coding\n  0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  # VoiceAI: Interaction\n  0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  # HealthAI: Health\n  0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  # GameAI: Creativity, Gaming\n  0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  # MusicAI: Creativity\n  0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  # CarAI: Driving\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 1   # TutorAI: Education\n  ), \n  nrow = 10, byrow = TRUE)\n\ncolnames(features) <- c(\"Education\", \"Interaction\", \"Creativity\", \"Coding\", \n                        \"Voice\", \"Health\", \"Gaming\", \"Music\", \"Driving\", \"Tutoring\")\n\nrownames(features) <- colnames(ratings)\n\n# Cosine similarity for content-based recommendations\nsim_matrix <- as.matrix(simil(features, method = \"cosine\"))\n\ncontent_recs <- apply(sim_matrix, 1, function(x) names(sort(x, decreasing = TRUE)[2]))\n```\n:::\n\n\n\n+ **Task 6.1: Check \"StudyApp\"**\n  + Run `content_recs[\"StudyApp\"]`\n\n+ **Task 6.2: Check \"ChatBot\"**\n  + Run `content_recs[\"ChatBot\"]`\n\n::: notes\n\n+ 10 minutes\n\n+ Content: Explain: \"Recommends based on product features, like app categories.\"\n\n+ Presenter Tips: Show similarity (e.g., StudyApp → TutorAI). Compare to UBCF.\n\n+ Practice (3 min): Note StudyApp’s similar product. Why similar?\n\n+ Discussion (2 min): How does content-based filtering differ? Example: Health apps.\n\n+ Simplify cosine similarity explanation: \"Matches similar features\"\n\n:::\n\n## Step 7: Evaluating Recommendations\n\n**Objective: Assess recommendation quality**\n\n+ Check if predictions match user interests\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split data for evaluation\ntrain <- ratings[1:20]\ntest <- ratings[21:30]\n\nrecommender <- Recommender(train, method = \"UBCF\", \n                          param = list(normalize = \"center\", \n                                       method = \"cosine\"))\n\npred_test <- predict(recommender, test, n = 2)\n```\n:::\n\n\n\n+ **Task 7.1: Check User21’s predictions**\n  + Run `as(pred_test, \"list\")[[1]]`\n\n+ **Task 7.2: Compare to actual ratings**\n  + Compare to `as(test, \"matrix\")[1, ]`\n\n::: notes\n\n+ 10 minutes\n\n+ Content: Explain\n  + \"Test if recommendations match actual ratings.\"\n\n+ Presenter Tips\n  + Show test user’s predictions vs. actual ratings.\n\n+ Practice\n  + Check User21’s recommendations\n  + Do they fit?\n\n+ Discussion\n  + Why evaluate accuracy?\n  + Example: Bad app suggestions\n\n+ Keep evaluation simple for beginners\n\n:::\n\n## Step 8: Visualizing and Discussing Results\n\n**Objective: Visualize recommendations, compare methods, discuss societal impact**\n\n+ Plot top recommendations; compare collaborative vs. content-based\n\n+ Collaborative Filtering Plot:\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_recs <- as(predictions, \"list\")[[1]]\n\nrec_data <- tibble(Product = top_recs, Score = 1:length(top_recs))\n\nggplot(rec_data, aes(x = reorder(Product, Score), y = Score)) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  labs(title = \"Top Recommendations for User1 (Collaborative)\", x = \"Product\", y = \"Rank\") +\n  theme_minimal()\n```\n:::\n\n\n\n+ Comparison Plot\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomparison <- tibble(\n  Product = c(colnames(ratings)[1:2], content_recs[1:2]),\n  Method = rep(c(\"Collaborative\", \"Content-Based\"), each = 2),\n  Rank = rep(1:2, 2)\n  )\n\nggplot(comparison, \n       aes(x = Product, y = Rank, fill = Method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Recommendation Comparison\", \n       x = \"Product\", \n       y = \"Rank\") +\n  scale_fill_manual(values = c(\"#1f77b4\", \"#ff7f0e\")) +\n  theme_minimal()\n```\n:::\n\n\n+ **Task 8.1: Run collaborative plot**\n  + Note User1’s top product\n\n+ **Task 8.2: Run comparison plot**\n\n+ Compare methods for StudyApp\n\n+ **Task 8.3: Check differences**\n  + Run `tibble(Collaborative = pred_list[[1]], ContentBased = content_recs[pred_list[[1]]])`\n\n::: notes\n\n+ 16 minutes\n\n+ StudyApp: Collaborative (user-driven) vs. Content-Based (feature-driven)\n\n+ ChatBot: May differ due to interaction features\n\n+ Why do methods differ?\n  + Collaborative uses ratings, content-based uses features\n  + Societal impacts\n    + Personalization vs. privacy filter bubbles\n\n+ How can recommendations improve AI use in society?\n\n+ Content\n  + Explain\n    + \"Collaborative uses user similarity; content-based uses product features\"\n  \n  + Presenter Tips\n    + Show plots\n      + highlight StudyApp differences\n        + e.g., collaborative suggests TutorAI, content-based suggests CodeTool\n  + Practice (5 min)\n    + Run plots, check differences for StudyApp/ChatBot\n    \n+ Discussion (6 min):\n How do recommendations affect choices? \n  + e.g. Biased social media feeds\n  + Limits (privacy concerns)\n  \n:::\n\n## Step 9: Factor Models for Recommendations\n\n**Objective:** Use matrix factorization for recommendations\n\n+  Breaks ratings into latent factors (e.g., user preferences for education apps)\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecommender_svd <- Recommender(ratings, method = \"SVD\", \n                              param = list(k = 5))  # 5 latent factors\n\npredictions_svd <- predict(recommender_svd, ratings[1:5], n = 2)\n\npred_list_svd <- as(predictions_svd, \"list\")\n```\n:::\n\n\n+ **Task 9.1: Check User1’s SVD recommendations**\n  + Run `pred_list_svd[[1]]`\n\n+ **Task 9.2: Compare User1’s UBCF vs. SVD**\n  + Run `c(UBCF = pred_list_ubcf[[1]], SVD = pred_list_svd[[1]])`\n\n::: notes\n\n+ 10 minutes\n\n+ **Content:** Explain: \"Factor models find hidden patterns, like preferring educational apps.\"\n\n+ **Presenter Tips:** Simplify SVD: \"Breaks ratings into user/item traits.\" Show User1’s differences.\n\n+ **Practice (3 min):** Check User1’s SVD recommendations. Note differences from UBCF.\n\n+ **Discussion (2 min):** Why might SVD differ? Example: Capturing broader preferences.\n\n+ Keep explanation simple: \"Like grouping apps by hidden themes.\"\n\n:::\n\n## Step 10: LDA for Recommendations\n\n**Objective:** Use Latent Dirichlet Allocation for recommendations\n\n+ Models items as topics (e.g., \"educational\" or \"creative\") based on ratings\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert ratings to binary (rated = 1, not rated = 0) for LDA\nratings_binary <- ratings\nratings_binary@data[!is.na(ratings_binary@data)] <- 1\nratings_binary@data[is.na(ratings_binary@data)] <- 0\n\n# Run LDA with 5 topics\nlda_model <- LDA(ratings_binary@data, k = 5, control = list(seed = 123))\nitem_topics <- posterior(lda_model)$topics\n\n# Recommend items with similar topics for User1\nuser1_topics <- item_topics[1, ]\nlda_recs <- colnames(ratings)[order(item_topics[1, ], decreasing = TRUE)[1:2]]\n```\n:::\n\n\n+ **Task 10.1: Run `lda_recs`**\n+ **Task 10.2: Compare User1’s UBCF vs. LDA**\n  + Run `c(UBCF = pred_list_ubcf[[1]], LDA = lda_recs)`\n\n::: notes\n\n+  10 minutes\n\n+ **Content:** Explain: \"LDA groups items by themes, like ‘education’ or ‘gaming.’\"\n\n+ **Presenter Tips:** Simplify: \"Like sorting apps into categories based on ratings.\" Show User1’s LDA recs.\n\n+ **Practice (3 min):** Check LDA recommendations. Note differences from UBCF.\n\n+ **Discussion (2 min):** Why might LDA differ? Example: Theme-based suggestions.\n\n+ Simplify LDA: \"Finds what apps have in common.\"\n\n:::\n\n## Step 11: Visualizing \n\n**Objective:** Visualize recommendations, compare methods, discuss societal impact\n\n+ Plot top recommendations; compare UBCF, SVD, and LDA\n\n+ **Collaborative Filtering Plot:**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_recs_ubcf <- pred_list_ubcf[[1]]\n\nrec_data <- tibble(Product = top_recs_ubcf, Score = 1:length(top_recs_ubcf))\n\nggplot(rec_data, \n       aes(x = reorder(Product, Score), y = Score)) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  labs(title = \"Top Recommendations for User1 (UBCF)\", \n       x = \"Product\", y = \"Rank\") +\n  theme_minimal()\n```\n:::\n\n\n+ **Comparison Plot:**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomparison <- tibble(\n  Product = c(pred_list_ubcf[[1]],  pred_list_svd[[1]], lda_recs),\n  Method = rep(c(\"UBCF\", \"SVD\", \"LDA\"), each = 2),\n  Rank = rep(1:2, 3)\n)\n\nggplot(comparison,\n       aes(x = Product, y = Rank, fill = Method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Recommendation Comparison for User1\", x = \"Product\", y = \"Rank\") +\n  scale_fill_manual(values = c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\")) +\n  theme_minimal()\n```\n:::\n\n\n+ **Task 8.1:** Run UBCF plot. Note User1’s top product\n  + Run `top_recs_ubcf`\n\n+ **Task 8.2:** Run comparison plot. Compare methods for StudyApp\n  + Run `comparison`\n\n+ **Task 8.3: Check differences**\n  + Run  `tibble(UBCF = pred_list_ubcf[[1]], SVD = pred_list_svd[[1]], LDA = lda_recs)`\n    + StudyApp: UBCF (user similarity), SVD (latent factors), LDA (topic-based)\n    + ChatBot: May differ due to thematic grouping in LDA\n\n::: notes\n\n+ 15 minutes\n\n+ **Content:** Explain: \"UBCF uses user similarity, SVD finds patterns, LDA groups by themes.\"\n\n+ **Presenter Tips:** Show plots; highlight StudyApp differences (e.g., UBCF vs. LDA). Pre-compute LDA if slow.\n\n+ **Practice (4 min):** Run plots, check differences for StudyApp/ChatBot.\n\n+ **Discussion (5 min):** Discuss: How do recommendations affect choices? Example: Biased social media feeds. Limits (privacy concerns)?\n\n+ **Takeaway:** Recommendation systems personalize AI but raise ethical questions.\n\n+  **Resources:** R for Data Science (https://r4ds.had.co.nz), Recommender Systems Handbook, Kaggle datasets.\n\n+ Wrap up, encourage exploring movie datasets.\n\n:::\n\n## Discussion\n\n+ Why do methods differ? (UBCF: user similarity, SVD: hidden patterns, LDA: themes)\n\n+ Societal impacts: Personalization vs. privacy, filter bubbles\n\n+ How can recommendations improve AI use in society?\n\n::: notes\n\n+ 5 min\n\n+ Facilitator Notes {visibility=\"hidden\"}\n  + **Preparation:** \n    + Install R, RStudio, packages (`tidyverse`, `recommenderlab`, `topicmodels`)\n    + Pre-test code to avoid errors. Pre-compute LDA if hardware is limited.\n  + **Dataset:** \n    + 30 users, 10 AI products, sparse ratings matrix to mimic real-world data\n  + **Pacing:** Total ~120 min \n    + Why: 6 min\n    + Overview: 4 min\n    + Background: 9 min\n    + Steps 1–3: 7 min each\n    + Steps 4–7: 10 min each\n    + Step 8: 14 min\n    + Skip Task 6.2 or 7.2 if needed\n\n+ **Engagement:**\n  + Relate to students’ lives (e.g., app suggestions)\n  + Discuss privacy in Step 8\n\n+ **Troubleshooting:** Assist with RStudio navigation, package installation, LDA convergence issues\n\n```\n\n\n<!--\n\n\n\n## Takeaway\n\n+ Recommendation systems personalize AI but raise ethical questions\n\n## Resources\n\n+ R for Data Science (https://r4ds.had.co.nz)\n\n+ Recommender Systems Handbook\n\n+ Kaggle datasets\n\n::: notes\n\n+ Wrap up, encourage exploring other datasets (e.g., movies)\n\n+ Facilitator Notes\n  + Preparation\n    + Install R, RStudio, packages (tidyverse, recommenderlab, proxy). Pre-test code to avoid errors\n  + Dataset: 30 users, 10 AI products, sparse ratings matrix to mimic real-world data\n  + Pacing: Total ~120 min\n    + Steps 1–3: 8 min each\n    + Steps 4–7: 10 min each\n    + Step 8: 16 min\n  + Skip Task 6.2 or 7.2 if needed\n  + Engagement\n    + Relate to students’ lives\n      + e.g., app suggestions\n    + Discuss privacy in Step 8\n\n+ Troubleshooting\n  + Assist with RStudio navigation, package installation, and matrix operations\n\n:::\n\n## Conclusion\n\n+ Recap: Built recommendation system using R\n  + Explored collaborative and content-based methods\n  + Discussed societal impacts of AI recommendations\n  \n+ Encourage further exploration of recommendation systems\n\n+ Thank students for participation\n  + Invite questions and feedback\n  \n-->\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}